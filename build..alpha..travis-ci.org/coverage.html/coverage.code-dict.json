{"/home/travis/build/npmtest/node-npmtest-express-admin/test.js":"/* istanbul instrument in package npmtest_express_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-admin/lib.npmtest_express_admin.js":"/* istanbul instrument in package npmtest_express_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_admin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_admin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-admin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-admin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_admin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_admin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_admin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_admin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_admin.__dirname + '/lib.npmtest_express_admin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/app.js":"\nrequire('colors');\n\nvar fs = require('fs'),\n\tpath = require('path');\nvar cli = require('./lib/app/cli'),\n\tproject = require('./lib/app/project');\n\nvar express = require('express'),\n\tlogger = require('morgan'),\n\tbodyParser = require('body-parser'),\n\tmultipart = require('connect-multiparty'),\n\tcookieParser = require('cookie-parser'),\n\tsession = require('express-session'),\n\tcsrf = require('csurf'),\n\tmethodOverride = require('method-override'),\n\tserveStatic = require('serve-static'),\n\tconsolidate = require('consolidate'),\n\thogan = require('hogan.js');\n\nvar moment = require('moment'),\n\tasync = require('async');\n\nvar Client = require('./lib/db/client'),\n\tschema = require('./lib/db/schema'),\n\tsettings = require('./lib/app/settings'),\n\troutes = require('./lib/app/routes');\n\nvar Xsql = require('xsql'),\n\tqb = require('./lib/qb'),\n\tdcopy = require('deep-copy');\n\n\n// creates project's config files\nfunction initCommandLine (args, cb) {\n\tif (!fs.existsSync(args.dpath)) {\n\t\tconsole.log('Config directory path doesn\\'t exists!'.red);\n\t\tprocess.exit();\n\t}\n\tif (project.exists(args.dpath)) return cb();\n\t// else\n\tcli.promptForData(function (err, data) {\n\t\tif (err) return cb(err);\n\t\tproject.create(args.dpath, data, cb);\n\t});\n}\n\n// sets args.db.client\n// updates args.settings\nfunction initDatabase (args, done) {\n\ttry {\n\t\tvar client = new Client(args.config);\n\t} catch (err) {\n\t\treturn done(err);\n\t}\n\n\tasync.series([\n\t\tfunction (done) {\n\t\t\tvar options = args.config.mysql||args.config.pg||args.config.sqlite;\n\t\t\tclient.connect(options, function (err) {\n\t\t\t\tif (err) return done(err);\n\t\t\t\tvar x = new Xsql({\n\t\t\t\t\tdialect: client.name,\n\t\t\t\t\tschema: client.config.schema});\n\t\t\t\tif ('function'===typeof qb) qb = qb(x);\n\t\t\t\tdone();\n\t\t\t});\n\t\t},\n\t\tfunction (done) {\n\t\t\tvar sql = qb.partials.tables(client.config.schema);\n\t\t\tclient.query(sql, function (err, rows) {\n\t\t\t\tif (err) return done(err);\n\t\t\t\tif (!rows.length) return done(new Error('Empty schema!'));\n\t\t\t\tdone();\n\t\t\t});\n\t\t},\n\t\tfunction (done) {\n\t\t\tschema.getData(client, function (err, data) {\n\t\t\t\tif (err) return done(err);\n\t\t\t\t// write back the settings\n\t\t\t\tvar fpath = path.join(args.dpath, 'settings.json'),\n\t\t\t\t\tupdated = settings.refresh(args.settings, data);\n\t\t\t\tfs.writeFileSync(fpath, JSON.stringify(updated, null, 4), 'utf8');\n\n\t\t\t\targs.settings = updated;\n\t\t\t\tdone();\n\t\t\t});\n\t\t}\n\t], function (err) {\n\t\tif (err) return done(err);\n\t\targs.db = {client:client};\n\t\tdone();\n\t});\n}\n\n// modifies args\nfunction initSettings (args) {\n\t// route variables\n\n\t// upload\n\tvar upload = args.config.app.upload || path.join(__dirname, 'public/upload');\n\targs.config.app.upload = upload;\n\tif (!fs.existsSync(upload)) fs.mkdirSync(upload);\n\n\t// languages\n\targs.langs = (function () {\n\t\tvar dpath = path.join(__dirname, 'config/lang'),\n\t\t\tfiles = fs.readdirSync(dpath),\n\t\t\tlangs = {};\n\t\tfor (var i=0; i < files.length; i++) {\n\t\t\tvar name = files[i].replace(path.extname(files[i]), '');\n\t\t\tlangs[name] = require(path.join(dpath, files[i]));\n\t\t}\n\t\treturn langs;\n\t}());\n\n\t// slug to table map\n\targs.slugs = (function () {\n\t\tvar slugs = {};\n\t\tfor (var key in args.settings) {\n\t\t\tslugs[args.settings[key].slug] = key;\n\t\t}\n\t\treturn slugs;\n\t}());\n\n\t// debug\n\targs.debug = args.config.app.debug || (cli.dev ? true : false);\n\t// if (!args.debug) console.warn = function(){};\n\t// log\n\targs.log = args.config.app.log || (cli.log ? true : false);\n\n\t// events\n\tfor (var key in args.custom) {\n\t\tvar fpath = args.custom[key].events;\n\t\tif (fpath) break;\n\t}\n\tvar events = fpath ? require(fpath) : {};\n\tif (!events.hasOwnProperty('preSave'))\n\t\tevents.preSave = function (req, res, args, next) {next()};\n\tif (!events.hasOwnProperty('postSave'))\n\t\tevents.postSave = function (req, res, args, next) {next()};\n\tif (!events.hasOwnProperty('preList'))\n\t\tevents.preList = function (req, res, args, next) {next()};\n\targs.events = events;\n\n\n\t// template variables\n\n\t// root\n\tif (args.config.app.root) {\n\t\tvar root = args.config.app.root;\n\t\tif (/.*\\/$/.test(root)) args.config.app.root = root.slice(0,-1);\n\t} else {\n\t\targs.config.app.root = '';\n\t}\n\n\t// layouts/themes/languages\n\targs.layouts = args.config.app.layouts;\n\targs.themes = args.config.app.themes\n\t\t? {theme: require(path.join(__dirname, 'config/themes'))} : null;\n\n\targs.languages = (function () {\n\t\tif (!args.config.app.languages) return null;\n\t\tvar langs = [];\n\t\tfor (var key in args.langs) {\n\t\t\tlangs.push({key: key, name: args.langs[key].name});\n\t\t}\n\t\treturn {language: langs};\n\t}());\n\n\t// static\n\targs.libs = dcopy(require(path.join(__dirname, 'config/libs')));\n\targs.libs.external = {css: [], js: []};\n\tfor (var key in args.custom) {\n\t\tvar assets = args.custom[key].public;\n\t\tif (!assets) continue;\n\t\tif (assets.local) {\n\t\t\targs.libs.js = args.libs.js.concat(assets.local.js||[]);\n\t\t\targs.libs.css = args.libs.css.concat(assets.local.css||[]);\n\t\t}\n\t\tif (assets.external) {\n\t\t\targs.libs.external.js = args.libs.external.js.concat(assets.external.js||[]);\n\t\t\targs.libs.external.css = args.libs.external.css.concat(assets.external.css||[]);\n\t\t}\n\t}\n}\n\nfunction initServer (args) {\n\tvar r = require('./routes');\n\n\t// general settings\n\tvar app = express()\n\t\t.set('views', path.resolve(__dirname, './views'))\n\t\t.set('view engine', 'html')\n\t\t.engine('html', consolidate.hogan)\n\n\t\t.use(logger('dev'))\n\t\t.use(bodyParser.json())\n\t\t.use(bodyParser.urlencoded({extended: true}))\n\t\t.use(multipart())\n\n\t\t.use(cookieParser())\n\t\t.use(args.session || session({name: 'express-admin', secret: 'very secret - required',\n\t\t\t\t\t\tsaveUninitialized: true, resave: true}))\n\t\t.use(r.auth.status)// session middleware\n\t\t.use(csrf())\n\n\t\t.use(methodOverride())\n\t\t.use(serveStatic(path.join(__dirname, 'public')))\n\t\t.use(serveStatic((function () {\n\t\t\tvar dpath = path.resolve(__dirname, 'node_modules/express-admin-static');\n\t\t\tif (!fs.existsSync(dpath)) {\n\t\t\t\tdpath = path.resolve(__dirname, '../express-admin-static');\n\t\t\t}\n\t\t\treturn dpath;\n\t\t})()));\n\n\tif (!args.debug) app.set('view cache', true);\n\n\t// register custom static local paths\n\tfor (var key in args.custom) {\n\t\tvar assets = args.custom[key].public;\n\t\tif (!assets || !assets.local || !assets.local.path ||\n\t\t\t!fs.existsSync(assets.local.path)) continue;\n\t\tapp.use(serveStatic(assets.local.path));\n\t}\n\n\t// pass server wide variables\n\tapp.use(function (req, res, next) {\n\t\t// app data\n\t\tres.locals._admin = args;\n\n\t\t// i18n\n\t\tvar lang = req.cookies.lang || 'en';\n\t\tres.cookie('lang', lang, {path: '/', maxAge: 900000000});\n\t\tmoment.locale(lang == 'cn' ? 'zh-cn' : lang);\n\n\t\t// template vars\n\t\tres.locals.string = args.langs[lang];\n\t\tres.locals.root = args.config.app.root;\n\t\tres.locals.libs = args.libs;\n\t\tres.locals.themes = args.themes;\n\t\tres.locals.layouts = args.layouts;\n\t\tres.locals.languages = args.languages;\n\n\t\t// required for custom views\n\t\tres.locals._admin.views = app.get('views');\n\n\t\tnext();\n\t});\n\n\t// routes\n\n\t// init regexes\n\tvar _routes = routes.init(args.settings, args.custom);\n\n\t// register custom apps\n\t(function () {\n\t\tvar have = false;\n\t\tfor (var key in args.custom) {\n\t\t\tvar _app = args.custom[key].app;\n\t\t\tif (_app && _app.path && fs.existsSync(_app.path)) {\n\t\t\t\tvar view = require(_app.path);\n\t\t\t\tapp.use(view);\n\t\t\t\thave = true;\n\t\t\t}\n\t\t}\n\t\tif (have && _routes.custom) app.all(_routes.custom, r.auth.restrict, r.render.admin);\n\t}());\n\n\t// login/logout\n\tapp.get('/login', r.login.get, r.render.admin);\n\tapp.post('/login', r.auth.login);\n\tapp.get('/logout', r.auth.logout);\n\n\t// editview\n\tapp.get(_routes.editview, r.auth.restrict, r.editview.get, r.render.admin);\n\tapp.post(_routes.editview, r.auth.restrict, r.editview.post, r.render.admin);\n\n\t// listview\n\tapp.get(_routes.listview, r.auth.restrict, r.listview.get, r.render.admin);\n\tapp.post(_routes.listview, r.auth.restrict, r.listview.post, r.render.admin);\n\n\t// mainview\n\tapp.get(_routes.mainview, r.auth.restrict, r.mainview.get, r.render.admin);\n\n\t// not found\n\tapp.all('*', r.auth.restrict, r.notfound.get, r.render.admin);\n\n\treturn app;\n}\n\n\n// start only if this module is executed from the command line\nif (require.main === module) {\n\tvar args = {\n\t\tdpath: path.resolve(cli.getConfigPath())\n\t}\n\tinitCommandLine(args, function (err) {\n\t\tif (err) return console.log(err.message.red);\n\n\t\targs.config = require(path.join(args.dpath, 'config.json'));\n\t\targs.settings = require(path.join(args.dpath, 'settings.json'));\n\t\targs.custom = require(path.join(args.dpath, 'custom.json'));\n\t\targs.users = require(path.join(args.dpath, 'users.json'));\n\n\t\tinitDatabase(args, function (err) {\n\t\t\tif (err) return console.log(err.message.red);\n\n\t\t\t// extended settings\n\t\t\tinitSettings(args);\n\n\t\t\tvar app = initServer(args);\n\n\t\t\tapp.listen(args.config.server.port, function () {\n\t\t\t\tconsole.log('Express Admin listening on port'.grey,\n\t\t\t\t\t\t\targs.config.server.port.toString().green);\n\t\t\t});\n\t\t});\n\t});\n}\n\n\nexports = module.exports = {\n\tinitCommandLine: initCommandLine,\n\tinitDatabase: initDatabase,\n\tinitSettings: initSettings,\n\tinitServer: initServer,\n\tinit: function (config, done) {\n\t\tthis.initDatabase(config, function (err) {\n\t\t\tif (err) return done(err);\n\t\t\tthis.initSettings(config);\n\t\t\treturn done(null, this.initServer(config));\n\t\t}.bind(this));\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/app/cli.js":"\nvar path = require('path'),\n\tcli = require('commander'),\n\tvalidate = require('./validate');\nrequire('colors');\n\n\ncli\n\t.option('[path]', 'start the admin configured with [path]')\n\t.option('-v, --dev [path]', 'development mode: authentication, CSRF, database updates are off')\n\t.option('-l, --log [path]', 'log out various information: sql queries')\n.parse(process.argv);\n\n\n/**\n * Get the path to the user's configuration directory.\n *\n * @return {String} path\n * @api public\n */\n\ncli.getConfigPath = function () {\n\tvar dpath = null;\n\tswitch (true) {\n\t\tcase 'string' == typeof this.dev:\n\t\t\tdpath = this.dev;\n\t\t\tbreak;\n\t\tcase 'string' == typeof this.log:\n\t\t\tdpath = this.log;\n\t\t\tbreak;\n\t\tcase this.args.length > 0:\n\t\t\tdpath = this.args[0];\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tdpath = '';\n\t}\n\treturn dpath;\n}\n\n/**\n * Prompt for database credentials.\n *\n * @param {Function} callback\n * @return {Object} database credentials data\n * @api private\n */\n\ncli.promptForDatabase = function (cb) {\n\tvar text = ['Database type: ', 'Database name: ', 'Database user: ', 'Database password: '],\n\t\tkeys = ['type', 'database', 'user', 'password'],\n\t\tdata = {},\n\t\toptions = {},\n\t\tself = this;\n\tfunction prompt (text, cb) {\n\t\tself.prompt(text, function (input) {\n\t\t\tif (text == 'Database type: ') {\n\t\t\t\tif (input == '') {\n\t\t\t\t\treturn cb(input == '' ? 'mysql' : input);\n\t\t\t\t}\n\t\t\t\tif (!/(mysql|pg|sqlite)/.test(input)) {\n\t\t\t\t\tconsole.log('Valid database type is: mysql, sqlite or pg!'.red);\n\t\t\t\t\treturn prompt(text, cb);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (text == 'Database schema: ') {\n\t\t\t\treturn cb(input == '' ? 'public' : input);\n\t\t\t}\n\t\t\tif (input == '') {\n\t\t\t\tconsole.log('Database credentials are required!'.red);\n\t\t\t\treturn prompt(text, cb);\n\t\t\t}\n\t\t\tcb(input);\n\t\t});\n\t}\n\tfunction loop (i) {\n\t\tif (i == keys.length) return cb(null, data);\n\t\tprompt(text[i], function (input) {\n\t\t\tif (text[i] == 'Database type: ') {\n\t\t\t\toptions = data[input] = {};\n\t\t\t\tif (input == 'sqlite') {\n\t\t\t\t\ttext.splice(2,2);\n\t\t\t\t\tkeys.splice(2,2);\n\t\t\t\t\ttext[1] = 'Database file: ';\n\t\t\t\t} else if (input == 'pg') {\n\t\t\t\t\ttext.splice(4,0,'Database schema: ');\n\t\t\t\t\tkeys.splice(4,0,'schema');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toptions[keys[i]] = input;\n\t\t\t}\n\t\t\tloop(++i);\n\t\t});\n\t}\n\tloop(0);\n}\n\n/**\n * Prompt for server configuration.\n *\n * @param {Function} callback\n * @return {Object} server configuration data\n * @api private\n */\n\ncli.promptForServer = function (cb) {\n\tvar data = { server: {} };\n\tthis.prompt('Server port: ', Number, function (input) {\n\t\tdata.server.port = (input == 0) ? 3000 : input;\n\t\tcb(null, data);\n\t});\n}\n\n/**\n * Prompt for admin credentials.\n *\n * @param {Function} callback\n * @return {Object} admin credentials data\n * @api private\n */\n\ncli.promptForAdmin = function (cb) {\n\tvar self = this;\n\tfunction user (cb) {\n\t\tself.prompt('Admin user: ', function (input) {\n\t\t\tif (input == '') {\n\t\t\t\tconsole.log('Administrator user name is required!'.red);\n\t\t\t\treturn user(cb);\n\t\t\t}\n\t\t\tcb(input);\n\t\t});\n\t}\n\n\tfunction pass (cb) {\n\t\tself.prompt('Admin password: ', function (input) {\n\t\t\tif (!validate.adminPassword(input)) {\n\t\t\t\tconsole.log((\n\t\t\t\t\t'Must contains at least:\\n'+\n\t\t\t\t\t'2 lower case letters, 2 upper case letters '+\n\t\t\t\t\t'and 2 digits').red);\n\t\t\t\treturn pass(cb);\n\t\t\t}\n\t\t\tcb(input);\n\t\t});\n\t}\n\tuser(function (name) {\n\t\tpass(function (password) {\n\t\t\tvar data = { user: { name: name, pass: password } };\n\t\t\tcb(null, data);\n\t\t});\n\t});\n}\n\n/**\n * Prompt the user for required settings\n *\n * @param {Function} callback\n * @return {Object} data collected from the user\n * @api public\n */\n\ncli.promptForData = function (cb) {\n\tvar func = ['promptForDatabase', 'promptForServer', 'promptForAdmin'],\n\t\tresult = {},\n\t\tself = this;\n\tfunction loop (index) {\n\t\tif (index == func.length) return cb(null, result);\n\t\tself[func[index]](function (err, data) {\n\t\t\tif (err) return cb(err);\n\t\t\tvar key = Object.keys(data)[0];\n\t\t\tresult[key] = data[key];\n\t\t\tloop(++index);\n\t\t})\n\t}\n\tloop(0);\n}\n\nexports = module.exports = cli;\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/app/validate.js":"\nexports.admin = function (input) {\n\t\n}\n\n/**\n * Admin password should have at least 2*A-Z, 2*a-z, 2*0-9.\n *\n * @param {String} input\n * @return {Boolean} valid\n * @api public\n */\n\nexports.adminPassword = function (input) {\n\tfunction check (regex) {\n\t\tvar match = input.match(regex);\n\t\tif (match && match.length > 1) return true;\n\t\treturn false;\n\t}\n\treturn check(/[A-Z]/g) && check(/[a-z]/g) && check(/[0-9]/g)\n\t\t? true : false;\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/app/project.js":"\nvar fs = require('fs'),\n\tpath = require('path');\nvar user = require('./user');\n\n\nexports.exists = function (dpath) {\n\treturn (\n\t\tfs.existsSync(path.join(dpath, 'config.json')) &&\n\t\tfs.existsSync(path.join(dpath, 'custom.json')) &&\n\t\tfs.existsSync(path.join(dpath, 'settings.json')) &&\n\t\tfs.existsSync(path.join(dpath, 'users.json'))\n\t)\n\t? true\n\t: false;\n}\n\nexports.create = function (dpath, data, cb) {\n\t// user\n\tvar json = {};\n\tuser.create(data.user.name, data.user.pass, true, function (err, usr) {\n\t\tif (err) return cb(err);\n\t\tjson[usr.name] = usr;\n\t\tfs.writeFileSync(path.join(dpath, 'users.json'), JSON.stringify(json, null, 4), 'utf8');\n\t\tcb();\n\t});\n\tdelete data.user;\n\t\n\t// config\n\tdata.app = {\n\t\tlayouts: true,\n\t\tthemes: true,\n\t\tlanguages: true\n\t};\n\tfs.writeFileSync(path.join(dpath, 'config.json'), JSON.stringify(data, null, 4), 'utf8');\n\t// custom\n\tfs.writeFileSync(path.join(dpath, 'custom.json'), JSON.stringify({}, null, 4), 'utf8');\n\t// settings\n\tfs.writeFileSync(path.join(dpath, 'settings.json'), JSON.stringify({}, null, 4), 'utf8');\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/app/user.js":"\nvar pwd = require('pwd');\n\n\n/**\n * Create salt and hash for a given password.\n *\n * @param {String} name\n * @param {String} pass\n * @param {Boolean} admin\n * @param {Function} callback\n * @return {Object} user\n * @api public\n */\n\nexports.create = function (name, pass, admin, cb) {\n\tpwd.hash(pass, function (err, salt, hash) {\n\t\tif (err) return cb(err);\n\t\tvar user = {\n\t\t\tname: name,\n\t\t\tadmin: admin,\n\t\t\tsalt: salt,\n\t\t\thash: hash\n\t\t};\n\t\tcb(null, user);\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/db/client.js":"\n/**\n * MySql: https://github.com/felixge/node-mysql\n */\n\nfunction MySql () {\n\tthis.client = require('mysql');\n\tthis.connection = null;\n\tthis.config = null;\n\n\tthis.mysql = true;\n\tthis.name = 'mysql';\n}\n\nMySql.prototype.connect = function (options, done) {\n\tthis.connection = this.client.createConnection(options);\n\tthis.connection.connect(function (err) {\n\t\tif (err) return done(err);\n\t\tthis.config = this.connection.config;\n\t\tthis.config.schema = this.config.database;\n\t\tdone();\n\t}.bind(this));\n\t\n\tthis.connection.on('error', function (err) {\n\t\tif (err.code == 'PROTOCOL_CONNECTION_LOST') {\n\t\t\tthis.handleDisconnect(options);\n\t\t}\n\t\telse throw err;\n\t}.bind(this));\n}\n\nMySql.prototype.handleDisconnect = function (options) {\n\tsetTimeout(function () {\n\t\tthis.connect(options, function (err) {\n\t\t\terr && this.handleDisconnect(options);\n\t\t}.bind(this));\n\t}.bind(this), 2000);\n}\n\nMySql.prototype.query = function (sql, done) {\n\tthis.connection.query(sql, function (err, rows) {\n\t\tif (err) return done(err);\n\t\tdone(null, rows);\n\t});\n}\n\nMySql.prototype.getColumnsInfo = function (data) {\n\tvar columns = {};\n\tfor (var key in data) {\n\t\tvar column = data[key];\n\t\tcolumns[column.Field] = {\n\t\t\ttype: column.Type,\n\t\t\tallowNull: column.Null === 'YES' ? true : false,\n\t\t\tkey: column.Key.toLowerCase(),\n\t\t\tdefaultValue: column.Default\n\t\t\t// extra: column.Extra\n\t\t};\n\t}\n\treturn columns;\n}\n\n\n/**\n * PostgreSql: https://github.com/brianc/node-postgres\n * or: https://github.com/brianc/node-postgres-pure\n */\n\nfunction PostgreSQL () {\n\ttry {this.client = require('pg')}\n\tcatch (err) {\n\t\ttry {this.client = require('pg.js')}\n\t\tcatch (err) {\n\t\t\tthrow Error('Could not find `pg` or `pg.js` module');\n\t\t}\n\t}\n\tthis.connection = null;\n\tthis.config = null;\n\n\tthis.pg = true;\n\tthis.name = 'pg';\n}\n\nPostgreSQL.prototype.connect = function (options, done) {\n\tthis.connection = new this.client.Client(options);\n\tthis.connection.connect(function (err) {\n\t\tif (err) return done(err);\n\t\tthis.config = this.connection.connectionParameters;\n\t\tthis.config.schema = options.schema || 'public';\n\t\tdone();\n\t}.bind(this));\n}\n\nPostgreSQL.prototype.query = function (sql, done) {\n\tthis.connection.query(sql, function (err, result) {\n\t\tif (err) return done(err);\n\t\tif (result.command == 'INSERT' && result.rows.length) {\n\t\t\tvar obj = result.rows[0],\n\t\t\t\tkey = Object.keys(obj)[0];\n\t\t\tresult.insertId = obj[key];\n\t\t\treturn done(null, result);\n\t\t}\n\t\t// select\n\t\tdone(null, result.rows);\n\t});\n}\n\nfunction getType (column) {\n\tswitch (true) {\n\t\tcase /^double precision$/.test(column.Type):\n\t\t\treturn 'double';\n\n\t\tcase /^numeric$/.test(column.Type):\n\t\t\treturn column.numeric_precision\n\t\t\t\t? 'decimal('+column.numeric_precision+','+column.numeric_scale+')'\n\t\t\t\t: 'decimal'\n\t\t\n\t\tcase /^time\\s.*/.test(column.Type):\n\t\t\treturn 'time';\t\n\t\tcase /^timestamp\\s.*/.test(column.Type):\n\t\t\treturn 'timestamp';\n\n\t\tcase /^bit$/.test(column.Type):\n\t\t\treturn 'bit('+column.character_maximum_length+')';\n\t\tcase /^character$/.test(column.Type):\n\t\t\treturn 'char('+column.character_maximum_length+')';\n\t\tcase /^character varying$/.test(column.Type):\n\t\t\treturn 'varchar('+column.character_maximum_length+')';\n\n\t\tcase /^boolean$/.test(column.Type):\n\t\t\treturn 'char';\n\n\t\tdefault: return column.Type;\n\t}\n}\nPostgreSQL.prototype.getColumnsInfo = function (data) {\n\tvar columns = {};\n\tfor (var key in data) {\n\t\tvar column = data[key];\n\t\tcolumns[column.Field] = {\n\t\t\ttype: getType(column),\n\t\t\tallowNull: column.Null === 'YES' ? true : false,\n\t\t\tkey: (column.Key && column.Key.slice(0,3).toLowerCase()) || '',\n\t\t\tdefaultValue: column.Default && column.Default.indexOf('nextval')==0 ? null : column.Default\n\t\t\t// extra: column.Extra\n\t\t};\n\t}\n\treturn columns;\n}\n\n\n/**\n * Sqlite: https://github.com/mapbox/node-sqlite3\n */\n\nfunction SQLite () {\n\ttry {\n\t\tthis.client = require('sqlite3');\n\t} catch (err) {\n\t\tthrow new Error('Could not find `sqlite3` module');\n\t}\n\tthis.connection = null;\n\tthis.config = null;\n\n\tthis.sqlite = true;\n\tthis.name = 'sqlite';\n}\n\nSQLite.prototype.connect = function (options, done) {\n\tthis.connection = new this.client.Database(options.database);\n\tthis.config = {schema:''};\n\tdone();\n}\n\nSQLite.prototype.query = function (sql, done) {\n\tif (/^(insert|update|delete)/i.test(sql)) {\n\t\tthis.connection.run(sql, function (err) {\n\t\t\tif (err) return done(err);\n\t\t\tdone(null, {insertId: this.lastID});\n\t\t});\n\t} else {\n\t\tthis.connection.all(sql, function (err, rows) {\n\t\t\tif (err) return done(err);\n\t\t\tdone(null, rows);\n\t\t});\n\t}\n}\n\nSQLite.prototype.getColumnsInfo = function (data) {\n\tvar columns = {};\n\tfor (var i=0; i < data.length; i++) {\n\t\tvar column = data[i];\n\t\tcolumns[column.name] = {\n\t\t\ttype: column.type,\n\t\t\tallowNull: column.notnull === 1 ? false : true,\n\t\t\tkey: column.pk === 1 ? 'pri' : '',\n\t\t\tdefaultValue: column.dflt_value\n\t\t};\n\t}\n\treturn columns;\n}\n\n\n/**\n * Factory\n */\n\nfunction Client (config) {\n\tif (config.mysql)\n\t\treturn new MySql();\n\n\tif (config.pg)\n\t\treturn new PostgreSQL();\n\n\tif (config.sqlite)\n\t\treturn new SQLite();\n\n\telse throw new Error('Not supported database type!');\n}\n\n\nexports = module.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/db/schema.js":"\nvar async = require('async');\nvar qb = require('../qb')();\n\n\n// get all table or view names for this schema\nexports.getTables = function (client, type, done) {\n\tvar sql = qb.partials[type](client.config.schema);\n\tclient.query(sql, function (err, rows) {\n\t\tif (err) return done(err);\n\t\tdone(null, rows.map(function (row) {\n\t\t\treturn row[Object.keys(row)[0]];\n\t\t}));\n\t});\n}\n\n// get creation information for each column\nexports.getColumns = function (client, table, done) {\n\tvar sql = qb.partials.columns(table, client.config.schema);\n\tclient.query(sql, function (err, columns) {\n\t\tif (err) return done(err);\n\t\tdone(null, client.getColumnsInfo(columns));\n\t});\n}\n\n// get creation information for each column in each table and view\nexports.getData = function (client, done) {\n\tvar result = {};\n\tasync.each(['tables', 'views'], function (type, done) {\n\t\texports.getTables(client, type, function (err, tables) {\n\t\t\tif (err) return done(err);\n\t\t\tasync.each(tables, function (table, done) {\n\t\t\t\texports.getColumns(client, table, function (err, info) {\n\t\t\t\t\tif (err) return done(err);\n\t\t\t\t\tresult[table] = info;\n\t\t\t\t\tif (type == 'views') result[table].__view = true;\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t}, done);\n\t\t});\n\t}, function (err) {\n\t\tdone(err, result);\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/qb/index.js":"\nexports = module.exports = function (x) {\n\treturn {\n\t\tlst: require('./lst')(x),\n\t\ttbl: require('./tbl')(x),\n\t\totm: require('./otm')(x),\n\t\tmtm: require('./mtm')(x),\n\t\tpartials: require('./partials')(x)\n\t};\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/qb/lst.js":"\nvar x = null,\n\tz = require('./partials')();\n\n\nfunction join (table, column, index) {\n\tif (column.oneToMany) {\n\t\tvar ref = column.oneToMany,\n\t\t\talias = ref.table+index;\n\n\t\tvar joins = column.fk\n\t\t\t? [z.join(table, column.fk, ref, ref.pk, alias)]\n\t\t\t: [z.join(table, column.name, ref, ref.pk, alias)];\n\t}\n\telse if (column.manyToMany) {\n\t\tvar ref = column.manyToMany.ref,\n\t\t\tlink = column.manyToMany.link,\n\t\t\talias = ref.table+index;\n\n\t\tvar joins = [\n\t\t\tz.join(table, table.pk, link, link.parentPk),\n\t\t\tz.join(link, link.childPk, ref, ref.pk, alias)\n\t\t];\n\t}\n\n\tvar concat = z.concat(ref.columns,alias,undefined,' '),\n\t\tgroup = z.group(concat);\n\n\treturn {\n\t\tselect: x.as(group,x.name(column.name)),\n\t\tjoins: joins\n\t};\n}\n\n\nfunction select (args) {\n\tvar view = args.config,\n\t\ttable = view.table,\n\t\tcolumns = view.columns;\n\n\tvar names = [],\n\t\tjoins = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tif (!columns[i].listview.show) continue;\n\n\t\tif (columns[i].oneToMany || columns[i].manyToMany) {\n\t\t\tvar result = join(table, columns[i], i);\n\t\t\tjoins = joins.concat(result.joins);\n\t\t\tnames.push(result.select);\n\t\t}\n\t\telse {\n\t\t\tnames.push(x.name(columns[i].name,table.name,z.schema(table)));\n\t\t}\n\t}\n\tif (!table.view)\n\t\tnames.unshift(x.as(z.concat(table.pk,table.name,z.schema(table),','),x.name('__pk')));\n\n\tvar where = statement(table, columns, args.filter, joins);\n\n\t// always group by pk inside the listview!\n\tvar group = (function groupby () {\n\t\tif (table.view) return;\n\t\tvar pk = (table.pk instanceof Array) ? table.pk : [table.pk];\n\t\treturn x.groupby(x.names(pk,table.name));\n\t}());\n\n\tvar order = '';\n\tif (args.filter.order) {\n\t\tfor (var i=0; i < columns.length; i++) {\n\t\t\tif (columns[i].name == args.filter.order) {\n\t\t\t\tvar direction = args.filter.direction || 'asc';\n\t\t\t\tvar column = (columns[i].oneToMany || columns[i].manyToMany)\n\t\t\t\t\t? x.name(args.filter.order)//column as alias\n\t\t\t\t\t: x.name(args.filter.order,table.name,z.schema(table));\n\t\t\t\torder = [column, direction].join(' ');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse if (!Object.keys(view.listview.order).length) {\n\t\tif (table.view) {\n\t\t\torder = names[0] + ' asc';\n\t\t}\n\t\telse {\n\t\t\tvar pk = table.pk instanceof Array ? table.pk[0] : table.pk;\n\t\t\torder = x.name(pk,table.name,z.schema(table)) + ' asc';\n\t\t}\n\t}\n\telse {\n\t\torder = (function (table, list) {\n\t\t\tvar result = [];\n\t\t\tfor (var column in list) {\n\t\t\t\tvar order = list[column];\n\t\t\t\tresult.push([x.name(column,table.name,z.schema(table)), order].join(' '));\n\t\t\t}\n\t\t\treturn result.join();\n\t\t}(table, view.listview.order));\n\t}\n\n\tvar from = args.page ? (args.page-1)*view.listview.page : 0;\n\n\targs.statements = {\n\t\tcolumns: names.join(), table: x.name(table.name,z.schema(table)),\n\t\tjoin: joins.join(' '),\n\t\twhere: where, group: group, order: order,\n\t\tfrom: from, to: view.listview.page\n\t}\n}\n\nfunction create (args) {\n\tvar s = args.statements;\n\n\tvar str = [\n\t\tx.select(s.columns), x.from(s.table), s.join, s.where, s.group,\n\t\tx.orderby(s.order), x.limit(s.from,s.to), ';'\n\t].join(' ');\n\n\targs.log && console.log('lst'.cyan, str);\n\targs.query = str;\n}\n\nfunction statement (table, columns, filter, joins) {\n\tvar statements = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tvar column = columns[i],\n\t\t\tvalue = filter.columns[column.name];\n\t\tif (!value) continue;\n\n\t\tif (column.oneToMany && column.fk) {\n\t\t\tif (value == 'NULL') continue;\n\t\t\tstatements.push(x.and(z.eq(table, column.fk, value)));\n\t\t}\n\t\telse if (column.manyToMany) {\n\t\t\tif (!column.listview.show) {\n\t\t\t\tvar result = join(table, columns[i], i);\n\t\t\t\tjoins.push(result.joins[0]);\n\t\t\t\tjoins.push(result.joins[1]);\n\t\t\t}\n\t\t\tvar ref = column.manyToMany.ref,\n\t\t\t\talias = {alias: ref.table+i};\n\t\t\tstatements.push(z.in(ref.pk, value, alias));\n\t\t}\n\t\telse {\n\t\t\tvar expr = expression(table, column.name, column.control, value);\n\t\t\tif (!expr) continue;\n\t\t\tstatements.push(expr);\n\t\t}\n\t}\n\n\treturn statements.length\n\t\t? x.where(statements,(filter.or?'or':'and'))\n\t\t: '';\n}\n\nfunction expression (table, column, control, value) {\n\tvar name = x.name(column,table.name,z.schema(table));\n\n\tif (control.select && !!control.options) {\n\t\tif ('string'===typeof value) value = x.string(value);\n\t\treturn x.eq(name,value);\n\t}\n\telse if (control.select) {\n\t\treturn x.eq(name,value);\n\t}\n\telse if (control.date || control.time || control.datetime || control.year) {\n\t\tif (value[0] == '' && value[1] == '') return null;\n\t\tvar from = value[0] || value[1],\n\t\t\tto   = value[1] || value[0];\n\t\treturn [name, x.between(x.string(from),x.string(to))].join(' ');\n\t}\n\telse if (control.radio) {\n\t\t// string 0 or 1 - false|true\n\t\tif (x.dialect == 'pg') value = (value==0 ? x.wrap('f') : x.wrap('t'));\n\t\treturn x.eq(name,value);\n\t}\n\telse if (control.text || control.file) {\n\t\treturn [name,x.like(x.string(value+'%'))].join(' ');\n\t}\n\telse if (control.textarea) {\n\t\treturn [name,x.like(x.string('%'+value+'%'))].join(' ');\n\t}\n\telse {\n\t\treturn x.eq(name,value);\n\t}\n}\n\nfunction pagination (args) {\n\tvar table = args.config.table,\n\t\ts = args.statements;\n\n\tvar concat = z.concat(table.pk,table.name,z.schema(table),',');\n\n\tvar str = [\n\t\tx.select(\n\t\t\ttable.view ? '*'\n\t\t\t: x.as(x.func('count',['distinct',concat],' '),x.name('count'))),\n\t\tx.from(s.table),\n\t\ts.join,\n\t\ts.where,\n\t\t';'\n\t].join(' ');\n\n\targs.log && console.log('pgr'.cyan, str);\n\treturn str;\n}\n\nexports = module.exports = function (instance) {\n\tif (instance) x = instance;\n\treturn {\n\t\tjoin:join, select:select, create:create,\n\t\tstatement:statement, expression:expression,\n\t\tpagination:pagination\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/qb/partials.js":"\nvar x = null;\n\n\nfunction schema (table) {\n\tif (x.dialect != 'pg') return;\n\treturn table.schema||x._schema;\n}\n\nfunction concat (columns, table, schema, sep) {\n\tif (!(columns instanceof Array))\n\t\treturn x.name(columns,table,schema);\n\n\tvar result = [];\n\tif (x.dialect == 'sqlite') {\n\t\tfor (var i=0; i < columns.length; i++) {\n\t\t\tresult.push(x.func('ifnull',[x.name(columns[i],table),x.wrap('')]));\n\t\t}\n\t}\n\telse {\n\t\t// mysql|pg\n\t\tresult = x.names(columns,table,schema);\n\t}\n\tcolumns = result;\n\n\treturn (/mysql|pg/.test(x.dialect))\n\t\t? x.func('concat_ws',[x.wrap(sep),columns])\n\t\t// sqlite\n\t\t: columns.join(\"||'\"+sep+\"'||\");\n}\n\nfunction group (columns) {\n\treturn (/mysql|sqlite/.test(x.dialect))\n\t\t? x.func('group_concat',['distinct',columns],' ')\n\t\t// pg\n\t\t: x.func('string_agg',['distinct',[columns,x.wrap(',')].join()],' ')\n}\n\nfunction join (table, fk, ref, pk, alias) {\n\tvar tbl = table.name||table.table,\n\t\ttsch = this.schema(table),\n\t\trsch = this.schema(ref),\n\t\tref = ref.table;\n\n\tvar fks = (fk instanceof Array) ? fk : [fk];\n\tvar pks = (pk instanceof Array) ? pk : [pk];\n\n\tvar condition = [];\n\tfor (var i=0; i < fks.length; i++) {\n\t\tvar pk = pks[i], fk = fks[i];\n\n\t\tcondition.push(\n\t\t\tx.eq(x.name(fk,tbl,tsch),\n\t\t\t\talias ? x.name(pk,alias) : x.name(pk,ref,rsch)\n\t\t\t));\n\t}\n\n\treturn x.join(\n\t\talias ? x.alias(x.name(ref,rsch),x.name(alias)) : x.name(ref,rsch),\n\t\tcondition,\n\t\t'left'\n\t);\n}\n\nfunction eq (table, column, value) {\n\tvar columns = column instanceof Array ? column : [column];\n\n\tvar values =\n\t\t(value instanceof Array) ? value :\n\t\t('string'===typeof value  ? value.split(',') :\n\t\t[value]);\n\n\tvar tbl = table.name||table.table,\n\t\tsch = this.schema(table);\n\n\tvar result = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tresult.push(x.eqv(x.name(columns[i],tbl,sch),values[i]));\n\t}\n\n\treturn result;\n}\n\n// [1,2],[3,4] = [1,3],[2,4]\nfunction zip (columns, values) {\n\tfor (var i=0; i < values.length; i++) {\n\t\tvalues[i] = values[i].toString().split(',');\n\t}\n\tvar result = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tvar val = [];\n\t\tfor (var j=0; j < values.length; j++) {\n\t\t\tval.push(values[j][i]);\n\t\t}\n\t\tresult.push(val);\n\t}\n\treturn result;\n}\nfunction _in (column, value, alias) {\n\tvar columns = column instanceof Array ? column : [column],\n\t\tvalues = value instanceof Array ? value : [value];\n\n\tvalues = zip(columns, values);\n\n\tvar result = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tresult.push([\n\t\t\tx.name(columns[i],alias&&alias.alias),\n\t\t\tx.in(values[i])\n\t\t].join(' '));\n\t}\n\n\treturn x.and(result);\n}\n\nfunction tables (db) {\n\tif (x.dialect == 'mysql') {\n\t\treturn [\n\t\t\t'show tables in',\n\t\t\tx.name(db),\n\t\t\t';'\n\t\t].join(' ');\n\t}\n\telse if (x.dialect == 'pg') {\n\t\treturn [\n\t\t\tx.select('table_name'),\n\t\t\tx.from('information_schema.tables'),\n\t\t\tx.where(x.eq('table_schema',x.wrap(db))),\n\t\t\t';'\n\t\t].join(' ');\n\t}\n\telse if (x.dialect == 'sqlite') {\n\t\treturn [\n\t\t\tx.select(x.name('name')),\n\t\t\tx.from('sqlite_master'),\n\t\t\tx.where(x.eq('type',x.wrap('table'))),\n\t\t\t';'\n\t\t].join(' ');\n\t}\n}\n\nfunction views (db) {\n\tif (x.dialect == 'mysql') {\n\t\treturn [\n\t\t\t'show full tables in',\n\t\t\tx.name(db),\n\t\t\tx.where(x.name('TABLE_TYPE')),\n\t\t\tx.like(x.wrap('VIEW')),\n\t\t\t';'\n\t\t].join(' ');\n\t}\n\telse if (x.dialect == 'pg') {\n\t\treturn \"select viewname from pg_catalog.pg_views \"+\n\t\t\"where schemaname NOT IN ('pg_catalog', 'information_schema') \"+\n\t\t\"order by viewname;\";\n\t}\n\telse if (x.dialect == 'sqlite') {\n\t\treturn [\n\t\t\tx.select(x.name('name')),\n\t\t\tx.from('sqlite_master'),\n\t\t\tx.where(x.eq('type',x.wrap('view'))),\n\t\t\t';'\n\t\t].join(' ');\n\t}\n}\n\nfunction columns (table, schema) {\n\tif (x.dialect == 'mysql') {\n\t\treturn [\n\t\t\t'show columns in',\n\t\t\tx.name(table),\n\t\t\t'in',\n\t\t\tx.name(schema),\n\t\t\t';'\n\t\t].join(' ');\n\t}\n\telse if (x.dialect == 'sqlite') {\n\t\treturn [\n\t\t\t'pragma',\n\t\t\tx.func('table_info', x.wrap(table)),\n\t\t\t';'\n\t\t].join(' ');\n\t}\n\telse if (x.dialect == 'pg') {\n\t\treturn 'SELECT cs.column_name AS \"Field\", cs.data_type AS \"Type\", '+\n\t\t'cs.is_nullable AS \"Null\", tc.constraint_type AS \"Key\", '+\n\t\t'cs.column_default AS \"Default\", '+\n\t\t'cs.numeric_precision, cs.numeric_precision_radix, cs.numeric_scale, '+\n\t\t'cs.character_maximum_length '+\n\t\t'FROM \"information_schema\".\"columns\" cs '+\n\t\t'LEFT JOIN \"information_schema\".\"key_column_usage\" kc '+\n\t\t'\tON cs.column_name = kc.column_name '+\n\t\t'\tAND cs.table_schema = kc.table_schema '+\n\t\t'\tAND cs.table_name = kc.table_name '+\n\t\t'LEFT JOIN \"information_schema\".\"table_constraints\" tc '+\n\t\t'\tON kc.constraint_name = tc.constraint_name '+\n\t\t'\tAND kc.table_schema = tc.table_schema '+\n\t\t'\tAND kc.table_name = tc.table_name '+\n\t\t'WHERE '+\n\t\t'\tcs.table_name = \\''+table+'\\' '+\n\t\t'\tAND cs.table_schema = \\''+schema+'\\' ;';\n\t}\n}\n\nexports = module.exports = function (instance) {\n\tif (instance) x = instance;\n\treturn {\n\t\tschema:schema, concat:concat, group:group,\n\t\tjoin:join, eq:eq, in:_in,\n\t\ttables:tables, views:views, columns:columns\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/qb/tbl.js":"\nvar x = null,\n\tz = require('./partials')();\n\n\nfunction select (args) {\n\tvar table = args.config.table,\n\t\tcolumns = args.config.columns;\n\n\tvar names = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tif (columns[i].oneToMany && columns[i].fk)\n\t\t\tnames.push(x.as(\n\t\t\t\tz.concat(columns[i].fk,table.name,z.schema(table),','),\n\t\t\t\tx.name(columns[i].name)\n\t\t\t));\n\n\t\telse if (!columns[i].manyToMany)\n\t\t\tnames.push(x.name(columns[i].name,table.name,z.schema(table)));\n\t}\n\tnames.unshift(x.as(\n\t\tz.concat(table.pk,table.name,z.schema(table),','),\n\t\tx.name('__pk')\n\t));\n\n\tvar str = [\n\t\tx.select(names.join()),\n\t\tx.from(x.name(table.name,z.schema(table))),\n\t\tx.where(x.and(z.eq(table, (args.fk? args.fk:table.pk), args.id))),\n\t\t';'\n\t].join(' ');\n\n\targs.log && console.log('tbl'.cyan, str);\n\treturn str;\n}\n\nfunction insert (args, settings, record) {\n\tvar data = _kvp(args.name, record.columns, settings.columns);\n\t\n\tvar result = [\n\t\tx.insert(\n\t\t\tx.name(settings.table.name,z.schema(settings.table)), \n\t\t\tdata.keys,\n\t\t\tdata.values\n\t\t)\n\t];\n\n\tif (x.dialect == 'pg') {\n\t\t(settings.table.pk instanceof Array)\n\t\t\t? result.push('returning ' + x.names(settings.table.pk))\n\t\t\t: result.push('returning ' + x.name(settings.table.pk));\n\t}\n\tresult.push(';');\n\n\tvar str = result.join(' ');\n\targs.log && console.log('tbl'.yellow, str);\n\treturn str;\n}\n\nfunction update (args, settings, record) {\n\tvar data = _kvp(args.name, record.columns, settings.columns);\n\n\tvar str = [\n\t\tx.update(\n\t\t\tx.name(settings.table.name,z.schema(settings.table)),\n\t\t\tdata.keys,\n\t\t\tdata.values\n\t\t),\n\t\tx.where(x.and(z.eq(settings.table, settings.table.pk, record.pk))),\n\t\t';'\n\t].join(' ');\n\n\targs.log && console.log('tbl'.green, str);\n\treturn str;\n}\n\nfunction remove (args, settings, record) {\n\tvar pk = settings.table.pk;\n\n\tvar str = [\n\t\tx.delete(x.name(settings.table.name,z.schema(settings.table))),\n\t\tx.where(x.and(z.eq(settings.table,pk,record.pk))),\n\t\t';'\n\t].join(' ');\n\n\targs.log && console.log('tbl'.red, str);\n\treturn str;\n}\n\nfunction _kvp (table, data, columns) {\n\tvar keys = [], values = [];\n\n\tfor (var i=0; i < columns.length; i++) {\n\t\tif (columns[i].manyToMany) continue;\n\n\t\tvar name = columns[i].name;\n\t\tif (!{}.hasOwnProperty.call(data, name)) continue;\n\n\t\tif (columns[i].oneToMany && columns[i].fk) {\n\t\t\tvar _values = data[name].split(',');\n\t\t\tfor (var j=0; j < columns[i].fk.length; j++) {\n\t\t\t\tvar _name = columns[i].fk[j];\n\n\t\t\t\tkeys.push(x.name(_name));\n\t\t\t\tfor (var k=0; k < columns.length; k++) {\n\t\t\t\t\tif (columns[k].name == _name) {\n\t\t\t\t\t\tvar value = _values[j];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvalues.push(value||null);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tkeys.push(x.name(name));\n\t\tvar value = _escape(data[name], columns[i].type);\n\n\t\tvalues.push(value);\n\t}\n\treturn {keys: keys, values: values};\n}\n\nfunction _escape (value, type) {\n\tif (!value) return null;\n\tswitch (true) {\n\t\tcase (/(?:tiny|medium|long)?blob|(?:var)?binary\\(\\d+\\)/i.test(type)):\n\t\t\treturn \"X\\'\"+value+\"\\'\";\n\n\t\tcase (/bytea/.test(type)):\n\t\t\treturn \"\\'\\\\x\"+value+\"\\'\";\n\n\t\tdefault:\n\t\t\treturn value;\n\t}\n}\n\nexports = module.exports = function (instance) {\n\tif (instance) x = instance;\n\treturn {\n\t\tselect:select, insert:insert, update:update,\n\t\tremove:remove\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/qb/otm.js":"\nvar x = null,\n\tz = require('./partials')();\n\n\nfunction select (args, ref) {\n\tvar concat = z.concat(ref.columns,ref.table,undefined,' ');\n\n\tvar pk = x.as(z.concat(ref.pk,ref.table,z.schema(ref),','),x.name('__pk')),\n\t\ttext = x.as(concat,x.name('__text'));\n\n\tvar str = [\n\t\tx.select([pk,text]),\n\t\tx.from(x.name(ref.table,z.schema(ref))),\n\t\t';'\n\t].join(' ');\n\t\n\targs.log && console.log('otm'.grey, str);\n\treturn str;\n}\n\nexports = module.exports = function (instance) {\n\tif (instance) x = instance;\n\treturn {\n\t\tselect:select\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/qb/mtm.js":"\nvar x = null,\n\tz = require('./partials')();\n\n\nfunction select (args, column, pk) {\n\tvar link = column.manyToMany.link;\n\n\tvar concat = z.concat(link.childPk, link.table, z.schema(link),',');\n\n\tvar str = [\n\t\tx.select(concat),\n\t\tx.from(x.name(link.table,z.schema(link))),\n\t\tx.where(z.eq(link,link.parentPk,pk)),\n\t\t';'\n\t].join(' ');\n\n\targs.log && console.log('mtm'.blue, str);\n\treturn str;\n}\n\nfunction insert (args, ids, link, record) {\n\tvar parentPk = link.parentPk instanceof Array ? link.parentPk : [link.parentPk],\n\t\tchildPk = link.childPk instanceof Array ? link.childPk : [link.childPk];\n\n\tvar columns = x.names(parentPk.concat(childPk));\n\n\tvar values = (function values (parentValues, childValues) {\n\t\tparentValues = parentValues.toString().split(',');\n\n\t\tvar result = [];\n\t\tfor (var i=0; i < childValues.length; i++) {\n\t\t\tresult.push(parentValues.concat(childValues[i].toString().split(',')));\n\t\t}\n\t\treturn result;\n\t}(record.pk, ids));\n\n\tvar table = x.name(link.table,z.schema(link));\n\n\tvar str = [x.insert(table,columns,values), ';'].join(' ');\n\n\targs.log && console.log('mtm'.yellow, str);\n\treturn str;\n}\n\nfunction remove (args, ids, link, record) {\n\n\tvar str = [\n\t\tx.delete(x.name(link.table,z.schema(link))),\n\t\tx.where(z.eq(link, link.parentPk, record.pk)),\n\t\tx.and(z.in(link.childPk, ids)),\n\t\t';'\n\t].join(' ');\n\n\targs.log && console.log('mtm'.red, str);\n\treturn str;\n}\n\nexports = module.exports = function (instance) {\n\tif (instance) x = instance;\n\treturn {\n\t\tselect:select, insert:insert, remove:remove\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/app/settings.js":"\nvar slugify = require('slugify');\n\n\n/**\n * Insert new tables and columns for a settings object.\n *\n * @param {Object} settings\n * @param {Object} info\n * @param {Function} callback\n * @api public\n */\n\nexports.refresh = function (settings, info) {\n\tfor (var table in info) {\n\t\tvar view  = info[table].__view;\n\t\tdelete info[table].__view;\n\n\t\tvar columns = info[table],\n\t\t\tpk = primaryKey(columns);\n\n\t\tif (settings[table] === undefined) {\n\t\t\tsettings[table] = createTable(table, pk, view);\n\t\t}\n\n\t\tfor (var name in columns) {\n\t\t\tif (exists(settings[table].columns, name)) continue;\n\n\t\t\tsettings[table].columns.push(createColumn(name, columns[name]));\n\t\t}\n\t}\n\treturn settings;\n}\n\n/**\n * Check for column existence.\n *\n * @param {Array} columns\n * @param {String} name\n * @api private\n */\n\nfunction exists (columns, name) {\n\tfor (var i=0; i < columns.length; i++) {\n\t\tif (columns[i].name == name) return true;\n\t}\n\treturn false;\n}\n\n/**\n * Create settings object for a table.\n *\n * @param {String} name\n * @param {String} pk\n * @api private\n */\n\nfunction createTable (name, pk, view) {\n\treturn {\n\t\tslug: slugify(name),\n\t\ttable: {\n\t\t\tname: name,\n\t\t\tpk: pk,\n\t\t\tverbose: name,\n\t\t\tview: view\n\t\t},\n\t\tcolumns: [],\n\t\tmainview: {\n\t\t\tshow: true\n\t\t},\n\t\tlistview: {\n\t\t\torder: {},\n\t\t\tpage: 25\n\t\t},\n\t\teditview: {\n\t\t\treadonly: false\n\t\t}\n\t};\n}\n\n/**\n * Create a settings object for a column.\n *\n * @param {String} name\n * @param {Object} info\n * @param {Number} idx\n * @api private\n */\n\nfunction createColumn (name, info) {\n\treturn {\n\t\tname: name,\n\t\tverbose: name,\n\t\tcontrol: {text: true},\n\t\ttype: info.type,\n\t\tallowNull: info.allowNull,\n\t\tdefaultValue: info.defaultValue,\n\t\tlistview: {show: true},\n\t\teditview: {show: true}\n\t};\n}\n\n/**\n * Get the first found primary key from a given table's columns list.\n *\n * @param {Object} columns\n * @api private\n */\n\nfunction primaryKey (columns) {\n\tvar pk = [];\n\tfor (var name in columns) {\n\t\tfor (var property in columns[name]) {\n\t\t\tif (columns[name][property] === 'pri') {\n\t\t\t\tpk.push(name);\n\t\t\t}\n\t\t}\n\t}\n\treturn !pk.length ? '' : (pk.length > 1 ? pk : pk[0]);\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/app/routes.js":"\nexports.init = function (tables, custom) {\n\tregex.tables = getTableSlugs(tables)||/.*/i;\n\tregex.custom = getTableSlugs(custom);\n\treturn {\n\t\teditview: joinRegex('tables', 'edit', '$'),\n\t\tlistview: joinRegex('tables', 'list', '$'),\n\t\tcustom:   regex.custom ? joinRegex('custom', 'anything', '$') : null,\n\t\tmainview: regex.home,\n\t};\n}\n\nvar regex = {\n\tlogin:  /^\\/login/i,\n\tlogout: /^\\/logout/i,\n\ttables: null,\n\tcustom: null,\n\tanything: /(?:\\/.*)?/,\n\tlist:   /(?:\\/\\?p=\\d+)?/i,\n\tedit:   /\\/(.+|add)/i,\n\thome:   /^\\/$/,\n\t$:      /\\/?$/i\n};\n\n// regex helpers\n\nfunction joinRegex () {\n\tvar str = '';\n\tfor (var i=0; i < arguments.length; i++) {\n\t\tstr += regex[arguments[i]].source;\n\t}\n\treturn new RegExp(str);\n}\n\nfunction getTableSlugs (config) {\n\tvar slugs = [];\n\tfor (var key in config) {\n\t\tvar item = (config[key].app)\n\t\t\t? config[key].app\n\t\t\t: config[key];\n\n\t\tif (!item.mainview || !item.mainview.show) continue;\n\t\tif (item.table && !item.table.view && !item.table.pk) continue;\n\t\tslugs.push(item.slug);\n\t}\n\tif (!slugs.length) return null;\n\treturn new RegExp(['^\\\\/(',slugs.join('|'),')'].join(''), 'i');\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/public/express-admin.js":"\n;(function($) {\n'use strict';\n\nvar chosen = {\n\tallow_single_deselect: true,\n\tno_results_text: 'No results matched!<br /> <a href=\"#\">Click to add</a> ',\n\twidth: '100%'\n};\nfunction toJSONLocal (date) {\n\tvar local = new Date(date);\n\tlocal.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n\treturn local.toJSON().slice(0, 10); // toJSON is not supported in <IE8\n}\nfunction isMobile () {\n\treturn /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/gi\n\t\t.test(navigator.userAgent);\n}\nfunction getControls (self) {\n\treturn $([\n\t\t'.jumbotron > input',\n\t\t'.form-group .form-control',\n\t\t'.form-group .radio-inline input',\n\t\t'.form-group [type=file]'\n\t\t].join(), self);\n}\nfunction initDatetimePickers (type, ctx) {\n\tvar lang = cookie.getItem('lang');\n\tvar options = {\n\t\tweekStart: 1, autoclose: 1, todayHighlight: 1,\n\t\tkeyboardNavigation: 0, forceParse: 0, viewSelect: 'decade',\n\t\tlanguage: lang == 'cn' ? 'zh-CN' : lang\n\t};\n\tvar controls = [\n\t\t{format: 'yyyy-mm-dd',         formatViewType: 'date', startView: 2, minView: 2, maxView: 4},\n\t\t{format: 'hh:ii:ss',           formatViewType: 'time', startView: 1, minView: 0, maxView: 1},\n\t\t{format: 'yyyy-mm-dd hh:ii:ss',formatViewType: 'date', startView: 2, minView: 0, maxView: 4},\n\t\t{format: 'yyyy',               formatViewType: 'date', startView: 4, minView: 4, maxView: 4}\n\t];\n\tvar mobile = ['date', 'time', 'datetime', 'date'];\n\n\tvar selectors = ['.date', '.time', '.datetime-', '.year'];\n\tfor (var i=0; i < selectors.length; i++) {\n\t\tselectors[i] = (type == 'static')\n\t\t\t? 'tr:not(.blank) ' + selectors[i] + 'picker,'\n\t\t\t+ '.x-filter ' + selectors[i] + 'picker'\n\t\t\t: selectors[i] + 'picker';\n\t}\n\n\tvar have = false;\n\tfor (var i=0; i < selectors.length; i++) {\n\t\tif ($(selectors[i], ctx).length) {have = true; break;}\n\t}\n\tif (!have) return;\n\n\tif (isMobile()) {\n\t\tfor (var i=0; i < selectors.length; i++) {\n\t\t\t$(selectors[i], ctx).each(function (index) {\n\t\t\t\t$(this).attr('type', mobile[i]);\n\t\t\t});\n\t\t}\n\t} else {\n\t\tfor (var i=0; i < selectors.length; i++) {\n\t\t\t$(selectors[i], ctx).datetimepicker($.extend(options, controls[i]));\n\t\t}\n\t}\n}\n\n$(function () {\n\t// mainview table filter\n\t(function () {\n\t\tvar $input = $('.x-mv.x-filter [name=table]');\n\t\t$input.on('change input', function (e) {\n\t\t\tvar value = $(this).val();\n\t\t\t$('.x-table:eq(0) tbody tr').each(function (index) {\n\t\t\t\tvar name = $('a:eq(0)', this).text();\n\t\t\t\t(name.indexOf(value) == -1) ? $(this).hide() : $(this).show();\n\t\t\t\tlocalStorage.setItem('mv-filter', value);\n\t\t\t});\n\t\t});\n\t\t$('.x-mv.x-filter [name=clear]').on('click', function (e) {\n\t\t\tlocalStorage.setItem('mv-filter', '');\n\t\t\t$input.val('');\n\t\t\t$input.trigger('change');\n\t\t\t$('.x-filter').hide();\n\t\t});\n\t\tvar mvfilter = localStorage.getItem('mv-filter');\n\t\tif (mvfilter) {\n\t\t\t$input.val(mvfilter);\n\t\t\t$input.trigger('change');\n\t\t\t$('.x-mv.x-filter').show();\n\t\t}\n\t}());\n\n\t// inlines\n\t$('.add-another').on('click', function (e) {\n\t\t// table and current index\n\t\tvar name = $(this).data('table'),\n\t\t\t$table = $('table[data-table=\"'+name+'\"]');\n\t\t// get the last index\n\t\tvar index = $('.head', $table).length-1;\n\t\t// clone and set classes\n\t\tvar $rows = $('.blank', $table).clone();\n\t\t$rows.removeClass('blank hidden');\n\n\t\t// set the column keys\n\t\t$rows.each(function (idx) {\n\t\t\tvar $controls = getControls(this);\n\t\t\t$controls.each(function (i) {\n\t\t\t\tvar name = $(this).attr('name');\n\t\t\t\t$(this).attr('name', \n\t\t\t\t\tname.replace('blank', 'records').replace('index', index));\n\t\t\t});\n\t\t});\n\t\t// set keys for insert\n\t\t(function () {\n\t\t\tvar name = $rows.eq(0).find('input').attr('name');\n\t\t\t$rows.eq(0).find('input').attr('name',\n\t\t\t\tname.replace('blank', 'records').replace('index', index));\n\t\t}());\n\t\t\n\t\t// append\n\t\tvar tbody = $('tbody', $table);\n\t\t$rows.appendTo(tbody);\n\n\t\t// init controls\n\t\tif ($('.chosen-select').length) {\n\t\t\tif (isMobile()) $('.chosen-select').show();\n\t\t\t$('.chosen-select', $rows).chosen(chosen);\n\t\t}\n\t\tinitDatetimePickers('dynamic', $rows);\n\t\tif (typeof onAddInline === 'function')\n\t\t\tonAddInline($rows);\n\n\t\t// one\n\t\tif ($table.parents('#one').length) {\n\t\t\t$('tfoot', $table).addClass('hidden');\n\t\t}\n\t\treturn false;\n\t});\n\t$('table').on('click', '.remove', function (e) {\n\t\tvar name = $(this).data('table'),\n\t\t\t$table = $('table[data-table=\"'+name+'\"]');\n\n\t\t// remove\n\t\tvar head = $(this).parents('.head'),\n\t\t\trows = head.nextUntil('tr.head');\n\t\thead.remove();\n\t\trows.remove();\n\n\t\t// re-set the indexes\n\t\t$('.head:not(.blank)', $table).each(function (index) {\n\t\t\tvar idx = -1;\n\t\t\t\n\t\t\t$('.jumbotron input', this).each(function () {\n\t\t\t\tvar name = $(this).attr('name');\n\t\t\t\tidx = name.match(/.*(\\[\\d+\\]).*/)[1];\n\t\t\t\t$(this).attr('name', name.replace(idx, '['+index+']'));\n\t\t\t});\n\n\t\t\t$(this).nextUntil('tr.head').each(function () {\n\n\t\t\t\tvar $controls = getControls(this);\n\t\t\t\t$controls.each(function (i) {\n\t\t\t\t\tvar name = $(this).attr('name');\n\t\t\t\t\t$(this).attr('name', name.replace(idx, '['+index+']'));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t\n\t\t// one\n\t\tif ($table.parents('#one').length) {\n\t\t\t$('tfoot', $table).removeClass('hidden');\n\t\t}\n\t\treturn false;\n\t});\n\n\t// layout\n\t$('#x-layout a').on('click', function (e) {\n\t\t$('body, #navbar').removeClass();\n\t\tvar layout = this.hash.slice(1);\n\t\tlayout == 'fixed'\n\t\t\t? $('body, #navbar').addClass('container')\n\t\t\t: $('body, #navbar').addClass('container container-fluid');\n\t\t$('#x-layout li').removeClass('active');\n\t\t$(this).parent().addClass('active');\n\t\tlocalStorage.setItem('layout', layout);\n\t\treturn false;\n\t});\n\n\t// theme\n\tvar bootstrap = $('#bootstrap');\n\t$('#x-theme a').on('click', function (e) {\n\t\tvar theme = this.hash.slice(1),\n\t\t\turl = xAdmin.root+'/bootswatch/'+theme+'/bootstrap.min.css';\n\t\tbootstrap.attr('href', url);\n\t\t$('#x-theme li').removeClass('active');\n\t\t$(this).parent().addClass('active');\n\t\tlocalStorage.setItem('theme', theme);\n\t\treturn false;\n\t});\n\n\t// lang\n\t$('#x-lang a').on('click', function (e) {\n\t\tcookie.setItem('lang', this.hash.slice(1));\n\t\twindow.location.reload(true);\n\t\treturn false;\n\t});\n\n\t$('body').on('click', 'td .form-group .btn-today', function (e) {\n\t\t$(this).parents('td').find('input').val(toJSONLocal(new Date()));\n\t\treturn false;\n\t});\n\n\t// filter\n\t$('.glyphicon-filter').on('click', function (e) {\n\t\t$('.x-filter').toggle();\n\t\treturn false;\n\t});\n\n\t// init\n\tvar layout   = localStorage.getItem('layout') || 'fixed';\n\t$('#x-layout li').removeClass('active');\n\t$('#x-layout [href$=\"'+layout+'\"]').parent().addClass('active');\n\n\tvar theme = localStorage.getItem('theme') || 'default';\n\t$('#x-theme li').removeClass('active');\n\t$('#x-theme [href$=\"'+theme+'\"]').parent().addClass('active');\n\n\tvar lang = cookie.getItem('lang');\n\t$('#x-lang li').removeClass('active');\n\t$('#x-lang [href$=\"'+lang+'\"]').parent().addClass('active');\n\tif (lang != 'en')\n\t\t$('head').append(\n\t\t\t'<script src=\"'+xAdmin.root+'/jslib/locales/bootstrap-datetimepicker.'+lang+'.js\"'+\n\t\t\t' type=\"text/javascript\" charset=\"utf-8\"></script>'\n\t\t);\n\n\t// chosen\n\tif ($('.chosen-select').length) {\n\t\tif (isMobile()) $('.chosen-select').show();\n\t\t$('tr:not(.blank) .chosen-select, .x-filter .chosen-select').chosen(chosen);\n\t}\n\n\t// datepicker\n\tinitDatetimePickers('static', document);\n});\n})(jQuery);\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/routes/404.js":"\nexports.get = function (req, res, next) {\n\tres.locals.partials = {\n\t\tcontent: '404'\n\t};\n\n\tnext();\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/routes/auth.js":"\nvar pwd = require('pwd');\n\n\nexports.status = function (req, res, next) {\n\tres.locals.show = {\n\t\terror: req.session.error,\n\t\tsuccess: req.session.success\n\t};\n\tres.locals.username = req.session.username;\n\tdelete req.session.error;\n\tdelete req.session.success;\n\tdelete req.session.username;\n\tnext();\n}\n\nexports.restrict = function (req, res, next) {\n\tif (res.locals._admin.debug) return next();\n\n\tif (req.session.user) return next();\n\treq.session.error = res.locals.string['access-denied'];\n\tres.redirect(res.locals.root+'/login');\n}\n\nexports.login = function (req, res) {\n\t// query the db for the given username\n\tvar user = res.locals._admin.users[req.body.username];\n\tif (!user) {\n\t\treq.session.error = res.locals.string['find-user'];\n\t\treq.session.username = req.body.username;\n\t\tres.redirect(res.locals.root+'/login');\n\t\treturn;\n\t}\n\n\t// apply the same algorithm to the POSTed password, applying\n\t// the hash against the pass / salt, if there is a match we\n\t// found the user\n\tpwd.hash(req.body.password, user.salt, function (err, hash) {\n\t\tif (hash !== user.hash) {\n\t\t\treq.session.error = res.locals.string['invalid-password'];\n\t\t\treq.session.username = req.body.username;\n\t\t\tres.redirect(res.locals.root+'/login');\n\t\t\treturn;\n\t\t}\n\n\t\t// Regenerate session when signing in\n\t\t// to prevent fixation\n\t\treq.session.regenerate(function (err) {\n\t\t\t// Store the user's primary key\n\t\t\t// in the session store to be retrieved,\n\t\t\t// or in this case the entire user object\n\t\t\treq.session.user = user;\n\t\t\tres.redirect(res.locals.root+'/');\n\t\t});\n\t});\n}\n\nexports.logout = function (req, res) {\n\t// destroy the user's session to log them out\n\t// will be re-created next request\n\treq.session.destroy(function () {\n\t\t// successfully logged out\n\t\tres.redirect(res.locals.root+'/login');\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/routes/editview.js":"\nvar async = require('async'),\n\tdcopy = require('deep-copy');\nvar editview = require('../lib/editview/index'),\n\tdatabase = require('../lib/db/update');\n\n\nfunction getArgs (req, res) {\n\tvar args = {\n\t\tsettings : res.locals._admin.settings,\n\t\tdb       : res.locals._admin.db,\n\t\tdebug    : res.locals._admin.debug,\n\t\tlog      : res.locals._admin.log,\n\t\tslug     : req.params[0],\n\t\tid       : req.params[1] == 'add' ? null : req.params[1].split(','),\n\t\tdata     : req.body,\n\t\tupload   : req.files,\n\t\tupath    : res.locals._admin.config.app.upload\n\t};\n\targs.name = res.locals._admin.slugs[args.slug];\n\treturn args;\n}\n\nfunction page (req, args) {\n\tif (!req.session.filter || !req.session.filter[args.name]) return '';\n\tvar page = req.session.filter[args.name].page;\n\treturn page ? '?p='+page : '';\n}\n\nfunction action (req, name) {\n\treturn {}.hasOwnProperty.call(req.body.action, name);\n}\n\nexports.get = function (req, res, next) {\n\tvar args = getArgs(req, res);\n\n\teditview.getTypes(args, function (err, data) {\n\t\tif (err) return next(err);\n\t\trender(req, res, next, data, args);\n\t});\n}\n\nexports.post = function (req, res, next) {\n\tvar args = getArgs(req, res),\n\t\tevents = res.locals._admin.events;\n\n\teditview.getTypes(args, function (err, data) {\n\t\tif (err) return next(err);\n\n\t\tvar view = req.body.view,\n\t\t\ttable = Object.keys(view)[0];\n\n\t\tif (action(req, 'remove')) {\n\t\t\t// should be based on constraints\n\t\t\targs.action = 'remove';\n\n\t\t} else if ({}.hasOwnProperty.call(view[table].records[0], 'insert')) {\n\t\t\tif (args.error && !args.debug)\n\t\t\t\treturn render(req, res, next, data, args);\n\t\t\targs.action = 'insert';\n\n\t\t} else {\n\t\t\tif (args.error && !args.debug)\n\t\t\t\treturn render(req, res, next, data, args);\n\t\t\targs.action = 'update';\n\t\t}\n\n\t\tasync.series([\n\t\t\tevents.preSave.bind(events, req, res, args),\n\n\t\t\tdatabase.update.bind(database, args),\n\n\t\t\tevents.postSave.bind(events, req, res, args)\n\n\t\t], function (err) {\n\t\t\tif (err) {\n\t\t\t\treq.session.error = err.message;\n\t\t\t\tres.redirect(res.locals.root+'/'+args.slug+page(req, args));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treq.session.success = true;\n\n\t\t\t// based on clicked button\n\t\t\tif (action(req, 'remove')) {\n\t\t\t\t// the message should be different for delete\n\t\t\t\tres.redirect(res.locals.root+'/'+args.slug+page(req, args));\n\t\t\t}\n\t\t\telse if (action(req, 'save')) {\n\t\t\t\tres.redirect(res.locals.root+'/'+args.slug+page(req, args));\n\t\t\t}\n\t\t\telse if (action(req, 'another')) {\n\t\t\t\tres.redirect(res.locals.root+'/'+args.slug+'/add');\n\t\t\t}\n\t\t\telse if (action(req, 'continue')) {\n\t\t\t\tif (args.debug) return render(req, res, next, data, args);\n\t\t\t\tres.redirect(res.locals.root+'/'+args.slug+'/'+args.id.join());\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction render (req, res, next, data, args) {\n\tvar string = res.locals.string;\n\tvar view = args.settings[args.name];\n\n\tres.locals.view = {\n\t\ttables: data.view.tables,\n\t\tname: view.table.verbose,\n\t\tslug: args.slug,\n\t\taction: req.url,\n\t\treadonly: view.editview.readonly,\n\t\tsuccess: args.success\n\t};\n\tres.locals.breadcrumbs = {\n\t\tlinks: [\n\t\t\t{url: '/', text: string.home},\n\t\t\t{url: '/'+args.slug, text: view.table.verbose},\n\t\t\t{active: true, text: req.params[1]}\n\t\t]\n\t};\n\tres.locals.show.error = args.error;\n\tres.locals.show.delete = !(req.params[1] == 'add');\n\n\tdata.oneToOne.one = true;\n\tdata.oneToOne.type = 'one';\n\tdata.manyToOne.type = 'many';\n\tres.locals.inline = [data.oneToOne, data.manyToOne];\n\t\t\n\tres.locals.partials = {\n\t\tcontent:  'editview',\n\t\tview:     'editview/view',\n\t\tinline:   'editview/inline',\n\t\tcolumn:   'editview/column'\n\t};\n\t\n\tnext();\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/editview/index.js":"\nvar async = require('async'),\n\tdcopy = require('deep-copy');\nvar upload = require('./upload'),\n\tdata = require('../data'),\n\ttemplate = require('../template');\n\n\nfunction removeHidden (columns) {\n\tvar result = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tif (!columns[i].editview.show) continue;\n\t\tresult.push(columns[i]);\n\t}\n\treturn result;\n}\n\nfunction getData (args, done) {\n\targs.config.columns = removeHidden(args.config.columns);\n\n\tdata.otm.get(args, function (err) {\n\t\tif (err) return done(err);\n\t\tdata.stc.get(args);\n\t\tdata.tbl.get(args, function (err, rows) {\n\t\t\tif (err) return done(err);\n\t\t\tdata.mtm.get(args, rows, function (err) {\n\t\t\t\tif (err) return done(err);\n\t\t\t\tupload.loopRecords(args, function (err) {\n\t\t\t\t\tif (err) return done(err);\n\t\t\t\t\tdone(null, template.table.get(args, rows));\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction getTables (args, done) {\n\tvar tables = [];\n\tasync.eachSeries(Object.keys(args.tables), function (name, done) {\n\n\t\targs.config = dcopy(args.settings[name]);\n\t\targs.fk = args.tables[name];\n\n\t\tgetData(args, function (err, table) {\n\t\t\tif (err) return done(err);\n\t\t\ttables.push(table);\n\t\t\tdone();\n\t\t});\n\t}, function (err) {\n\t\tdone(err, tables);\n\t});\n}\n\nexports.getTypes = function (args, done) {\n\tvar result = {};\n\targs.config = dcopy(args.settings[args.name]);\n\tasync.eachSeries(['view', 'oneToOne', 'manyToOne'], function (type, done) {\n\t\targs.type = type;\n\n\t\targs.tables = {};\n\t\t(type == 'view')\n\t\t\t? args.tables[args.name] = null\n\t\t\t: args.tables = args.config.editview[type] || {};\n\n\t\targs.post = args.data ? args.data[type] : null;\n\t\targs.files = args.upload ? args.upload[type] : null;\n\n\t\tgetTables(args, function (err, tables) {\n\t\t\tif (err) return done(err);\n\t\t\tresult[type] = {tables: tables};\n\t\t\tdone();\n\t\t});\n\t}, function (err) {\n\t\tdelete args.type;\n\t\tdelete args.tables;\n\t\tdelete args.post;\n\t\tdelete args.files;\n\t\tdelete args.config;\n\t\tdelete args.fk;\n\t\tdone(err, result);\n\t});\n}\n\nexports._removeHidden = removeHidden;\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/editview/upload.js":"\nvar fs = require('fs'),\n\tpath = require('path');\n\n\n// prevent overriding of existing files\nfunction getName (target, cb) {\n\tvar ext = path.extname(target),\n\t\tfname = path.basename(target, ext),\n\t\tdpath = path.dirname(target);\n\tfs.exists(target, function (exists) {\n\t\treturn exists ? loop(1) : cb(target, fname+ext);\n\t});\n\tfunction loop (i) {\n\t\tvar name = fname+'-'+i,\n\t\t\tfpath = path.join(dpath, name+ext);\n\t\tfs.exists(fpath, function (exists) {\n\t\t\treturn exists ? loop(++i) : cb(fpath, name+ext);\n\t\t});\n\t}\n}\n\n// get control type\nfunction getType (args, name) {\n\tvar columns = args.config.columns;\n\tfor (var i=0; i < columns.length; i++) {\n\t\tif (columns[i].name == name) return columns[i].control;\n\t}\n\treturn {};\n}\n\nfunction processFile (args, file, type, cb) {\n\tif (!file.name) return cb(null, file.name);\n\t// file.name; // file-name.jpg\n\t// file.path; // /tmp/9c9b10b72fe71be752bd3895f1185bc8\n\n\tvar source = file.path,\n\t\ttarget = path.join(args.upath, file.name);\n\n\tfs.readFile(source, function (err, data) {\n\t\tif (err) return cb(err);\n\t\tif (type.binary) return cb(null, data);\n\t\t\n\t\tgetName(target, function (target, fname) {\n\t\t\tfs.writeFile(target, data, function (err) {\n\t\t\t\tif (err) return cb(err);\n\t\t\t\tcb(null, fname);\n\t\t\t});\n\t\t});\n\t});\n}\n\nfunction loopColumns (args, files, post, cb) {\n\tvar keys = Object.keys(files.columns);\n\n\t(function loop (index) {\n\t\tif (index == keys.length) return cb();\n\t\tvar name = keys[index],\n\t\t\ttype = getType(args, name);\n\n\t\tprocessFile(args, files.columns[name], type, function (err, result) {\n\t\t\tif (err) return cb(err);\n\t\t\t// either file name or file data\n\t\t\tif (result) post.columns[name] = \n\t\t\t\ttype.binary ? result.toString('hex') : result;\n\t\t\tloop(++index);\n\t\t});\n\t}(0));\n}\n\nexports.loopRecords = function (args, cb) {\n\tif (!args.files) return cb();\n\n\tvar files = args.files[args.config.table.name],\n\t\tpost = args.post[args.config.table.name];\n\tif (!files.records) return cb();\n\t(function loop (index) {\n\t\tif (index == files.records.length) return cb();\n\t\tloopColumns(args, files.records[index], post.records[index], function (err) {\n\t\t\tif (err) return cb(err);\n\t\t\tloop(++index);\n\t\t});\n\t}(0));\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/data/index.js":"\nexports = module.exports = {\n\ttbl: require('./tbl'),\n\totm: require('./otm'),\n\tmtm: require('./mtm'),\n\tstc: require('./stc'),\n\tlist: require('./list'),\n\tpagination: require('./pagination')\n}","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/data/tbl.js":"\nvar qb = require('../qb')();\n\n\n// get table records\n\nexports.get = function (args, done) {\n\tif (args.post) {\n\t\tvar table = args.config.table,\n\t\t\trows = args.post[table.name].records || [];\n\t\treturn done(null, rows);\n\t}\n\n\tvar str = qb.tbl.select(args);\n\targs.db.client.query(str, function (err, rows) {\n\t\tif (err) return done(err);\n\t\tvar result = [];\n\t\tfor (var i=0; i < rows.length; i++) {\n\t\t\tresult.push({columns: rows[i]});\n\t\t}\n\t\tdone(null, result);\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/data/otm.js":"\nvar async = require('async');\nvar qb = require('../qb')();\n\n\n// modifies `args.config.columns` with `value`\n\nfunction getData (args, ref, done) {\n\tvar str = qb.otm.select(args, ref);\n\targs.db.client.query(str, function (err, rows) {\n\t\tif (err) return done(err);\n\t\tdone(null, rows);\n\t});\n}\n\nexports.get = function (args, done) {\n\tasync.each(args.config.columns, function (column, done) {\n\t\tif ((!column.oneToMany && !column.manyToMany) || !column.control.select)\n\t\t\treturn done();\n\t\tvar ref = column.oneToMany ? column.oneToMany : column.manyToMany.ref;\n\t\tgetData(args, ref, function (err, rows) {\n\t\t\tif (err) return done(err);\n\t\t\tcolumn.value = rows;\n\t\t\tdone();\n\t\t});\n\t}, done);\n}\n\nexports._getData = getData;\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/data/mtm.js":"\nvar async = require('async');\nvar qb = require('../qb')();\n\n\n// modifies `rows.columns` with manyToMany columns on select\n// modifies `rows` with ids on post\n\n// return an array of all child ids linked to this record's pk\nfunction getIds (args, column, pk, done) {\n\tvar str = qb.mtm.select(args, column, pk);\n\targs.db.client.query(str, function (err, rows) {\n\t\tif (err) return done(err);\n\t\tvar result = [];\n\t\tfor (var i=0; i < rows.length; i++) {\n\t\t\tresult.push(rows[i][Object.keys(rows[i])[0]]);\n\t\t}\n\t\tdone(err, result);\n\t});\n}\n\nfunction loopColumns (args, row, done) {\n\trow.ids = {};\n\tasync.each(args.config.columns, function (column, done) {\n\t\tif (!column.manyToMany) return done();\n\t\t\n\t\t// after select this column practically doesn't exists\n\t\tif (row.columns[column.name] === undefined)\n\t\t\trow.columns[column.name] = [];\n\n\t\tvar pk = row.pk || row.columns['__pk'];\n\t\tif (!pk) return done();\n\t\t\n\t\tgetIds(args, column, pk, function (err, ids) {\n\t\t\tif (err) return done(err);\n\t\t\targs.post\n\t\t\t\t// save the ids from the database\n\t\t\t\t? row.ids[column.name] = ids\n\t\t\t\t// selecting\n\t\t\t\t: row.columns[column.name] = ids;\n\n\t\t\tdone();\n\t\t});\n\t}, done);\n}\n\n// loopRecords\nexports.get = function (args, rows, done) {\n\tasync.each(rows, function (row, done) {\n\t\tloopColumns(args, row, done);\n\t}, done);\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/data/stc.js":"\n// load static values from settings\n// modifies `args.config.columns` with `value`\n\nfunction getSelect (options) {\n\tvar values = [];\n\tfor (var i=0; i < options.length; i++) {\n\t\tif ('string' === typeof options[i]) {\n\t\t\tvalues.push({__pk: options[i], __text: options[i]});\n\t\t}\n\t\telse if ('object' === typeof options[i]) {\n\t\t\tvar value = Object.keys(options[i])[0],\n\t\t\t\ttext = options[i][value];\n\t\t\tvalues.push({__pk: value, __text: text});\n\t\t}\n\t}\n\treturn values;\n}\n\nfunction getRadio (options) {\n\treturn [\n\t\t{text: options[0], value: 1},\n\t\t{text: options[1], value: 0}\n\t];\n}\n\nexports.get = function (args) {\n\tvar columns = args.config.columns;\n\tfor (var i=0; i < columns.length; i++) {\n\t\tvar control = columns[i].control;\n\t\tif (!(control.options instanceof Array)) continue;\n\n\t\tif (control.select) {\n\t\t\tcolumns[i].value = getSelect(control.options);\n\t\t}\n\t\telse if (control.radio) {\n\t\t\tcolumns[i].value = getRadio(control.options);\n\t\t}\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/data/list.js":"\nvar qb = require('../qb')(),\n\tformat = require('../format');\n\n\nexports.get = function (args, done) {\n\tvar columns = args.config.columns;\n\n\tvar visible = [],\n\t\tnames = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tif (!columns[i].listview.show) continue;\n\t\tvisible.push(columns[i]);\n\t\tnames.push(columns[i].verbose);\n\t}\n\tcolumns = visible;\n\t\n\tqb.lst.create(args);\n\n\targs.db.client.query(args.query, function (err, rows) {\n\t\tif (err) return done(err);\n\t\tvar idx = args.config.table.view ? 0 : 1;\n\n\t\tvar records = [];\n\t\tfor (var i=0; i < rows.length; i++) {\n\t\t\tvar pk = idx ? {\n\t\t\t\tid: rows[i]['__pk'],\n\t\t\t\ttext: rows[i][columns[0].name]\n\t\t\t} : null;\n\t\t\tvar values = [];\n\t\t\tfor (var j=idx; j < columns.length; j++) {\n\t\t\t\tvar value = rows[i][columns[j].name];\n\t\t\t\tvalue = format.list.value(columns[j], value);\n\t\t\t\tif (columns[j].manyToMany && value) value = {mtm: value.split(',')}\n\t\t\t\tvalues.push(value);\n\t\t\t}\n\t\t\trecords.push({pk: pk, values: values});\n\t\t}\n\t\tdone(null, {columns: names, records: records});\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/format/index.js":"\nexports = module.exports = {\n\tlist: require('./list'),\n\tform: require('./form')\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/format/list.js":"\nvar moment = require('moment');\n\n\nexports.value = function (column, value) {\n\tif (/^(datetime|timestamp).*/i.test(column.type)) {\n\t\treturn value ? moment(value).format('ddd MMM DD YYYY HH:mm:ss') : '';\n\t}\n\n\telse if (/^date.*/i.test(column.type)) {\n\t\treturn value ? moment(value).format('ddd MMM DD YYYY') : '';\n\t}\n\n\telse if (column.control.radio) {\n\t\t// mysql\n\t\tif (typeof value === 'number') {\n\t\t\treturn (value == 1) // flip\n\t\t\t\t? column.control.options[0]\n\t\t\t\t: column.control.options[1];\n\t\t}\n\t\t// pg\n\t\tif (typeof value === 'boolean') {\n\t\t\treturn (value == true) // flip\n\t\t\t\t? column.control.options[0]\n\t\t\t\t: column.control.options[1];\n\t\t}\n\t}\n\n\telse if (column.control.binary) {\n\t\treturn value ? 'data:image/jpeg;base64,'+value.toString('base64') : value;\n\t}\n\n\telse {\n\t\treturn value\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/format/form.js":"\nvar moment = require('moment');\n\n\nexports.value = function (column, value) {\n\tif (value == '' && column.defaultValue) {\n\t\tvalue = column.defaultValue;\n\t}\n\n\tif (column.control.date) {\n\t\tif (!value) return null;\n\t\tif (moment(value).isValid())\n\t\t\treturn moment(value).format('YYYY-MM-DD');\n\t\treturn value;\n\t}\n\n\telse if (column.control.datetime) {\n\t\tif (!value) return null;\n\t\tif (moment(value).isValid())\n\t\t\treturn moment(value).format('YYYY-MM-DD HH:mm:ss');\n\t\treturn value;\n\t}\n\n\telse if (column.control.binary) {\n\t\treturn value ? 'data:image/jpeg;base64,'+value.toString('base64') : value;\n\t}\n\n\telse if (column.control.multiple) {\n\t\treturn this.setActiveMultiple(column, value);\n\t}\n\n\telse if (column.control.select) {\n\t\treturn this.setActiveSingle(column, value);\n\t}\n\n\telse if (column.control.radio) {\n\t\treturn this.setActiveRadio(column, value);\n\t}\n\n\telse {\n\t\treturn value;\n\t}\n}\n\nexports.setActiveSingle = function (column, value) {\n\tif (!column.value) return value;\n\tvar rows = column.value;\n\tfor (var i=0; i < rows.length; i++) {\n\t\tif (rows[i]['__pk'] == value) {\n\t\t\trows[i].selected = true;\n\t\t\treturn rows;\n\t\t}\n\t}\n\treturn rows;\n}\n\nexports.setActiveMultiple = function (column, value) {\n\tif (!column.value) return value;\n\tvar rows = column.value;\n\tfor (var i=0; i < rows.length; i++) {\n\t\tvar pk = rows[i]['__pk'];\n\t\tvalue = (value instanceof Array) ? value : [value];\n\t\tfor (var j=0; j < value.length; j++) {\n\t\t\tif (pk == value[j]) {\n\t\t\t\trows[i].selected = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn rows;\n}\n\nexports.setActiveRadio = function (column, value) {\n\tif (value == 1)\n\t\tcolumn.value[0].active = true;\n\t\n\telse if (value == 0)\n\t\tcolumn.value[1].active = true;\n\t\n\treturn column.value;\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/data/pagination.js":"\nvar pagination = require('sr-pagination');\nvar qb = require('../qb')();\n\n\nexports.get = function (args, done) {\n\tvar str = qb.lst.pagination(args);\n\targs.db.client.query(str, function (err, rows) {\n\t\tif (err) return done(err);\n\t\tvar total = parseInt(rows[0].count),\n\t\t\trows = args.config.listview.page,\n\t\t\tpage = parseInt(args.page || 1);\n\t\tdone(null, pagination({page: page, links: 9, rows: rows, total: total}));\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/template/index.js":"\nexports = module.exports = {\n\ttable: require('./table')\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/template/table.js":"\nvar dcopy = require('deep-copy');\nvar validate = require('../editview/validate'),\n\tformat = require('../format');\n\n\nexports.blank = function (args) {\n\tvar table = args.config.table,\n\t\tcolumns = args.config.columns;\n\n\tvar names = [], blank = [];\n\tfor (var i=0; i < columns.length; i++) {\n\t\tnames.push(columns[i].name);\n\t\tblank.push(dcopy(columns[i]));\n\t}\n\n\tfor (var i=0; i < names.length; i++) {\n\t\tif (args.type === 'view') {\n\t\t\tblank[i].key = args.type+'['+table.name+'][records][0][columns]['+names[i]+']';\n\t\t} else {\n\t\t\tblank[i].key = args.type+'['+table.name+'][blank][index][columns]['+names[i]+']';\n\t\t}\n\t}\n\n\treturn blank;\n}\n\nexports.insert = function (args) {\n\tvar table = args.config.table;\n\treturn {\n\t\tkey: args.type+'['+table.name+'][blank][index][insert]',\n\t\tvalue: true\n\t};\n}\n\nexports.records = function (args, rows) {\n\tvar table = args.config.table;\n\tvar records = [];\n\tfor (var i=0; i < rows.length; i++) {\n\n\t\tvar values = rows[i].columns,\n\t\t\trecord = args.type+'['+table.name+'][records]['+i+']';\n\n\t\tvar pk = {\n\t\t\tkey: record+'[pk]',\n\t\t\tvalue: rows[i].pk || values['__pk']\n\t\t};\n\t\t\n\t\tvar insert = rows[i].insert\n\t\t\t? {\n\t\t\t\tkey: record+'[insert]',\n\t\t\t\tvalue: true\n\t\t\t} : null;\n\n\t\tvar remove = {\n\t\t\tkey: record+'[remove]',\n\t\t\tvalue: rows[i].remove ? true : null\n\t\t};\n\n\t\tvar columns = dcopy(args.config.columns);\n\t\tfor (var j=0; j < columns.length; j++) {\n\t\t\t\n\t\t\tvar column = columns[j];\n\t\t\tcolumn.key = record+'[columns]['+column.name+']';\n\t\t\t\n\t\t\tvar value = values[column.name];\n\t\t\tcolumn.error = validate.value(column, value);\n\t\t\tcolumn.value = format.form.value(column, value);\n\t\t\targs.error = column.error ? true : args.error;\n\t\t}\n\t\trecords.push({pk: pk, columns: columns, insert: insert, remove: remove});\n\t}\n\treturn records;\n}\n\n// `rows` comes either from sql select of from post request\nexports.get = function (args, rows) {\n\treturn {\n\t\tname: args.config.table.name,\n\t\tverbose: args.config.table.verbose,\n\t\trecords: this.records(args, rows),\n\t\tblank: this.blank(args),\n\t\tinsert: this.insert(args)\n\t};\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/editview/validate.js":"\nvar moment = require('moment'),\n\tvalidator = require('mysql-validator');\n\n\nexports.value = function (column, value) {\n\t\n\tif (value === '' || value === null || value === undefined\n\t\t|| (value instanceof Array && !value.length)) {\n\t\t\n\t\t// should check for column.defaultValue when creating a record\n\t\t\n\t\tif (column.allowNull) return null;\n\t\tif (column.control.binary) return null; //temp disabled\n\t\treturn new Error('Column '+column.name+' cannot be empty.');\n\t}\n\t\n\tvalue = format(column, value);\n\n\treturn validator.check(value, column.type);\n}\n\nfunction format (column, value) {\n\tswitch (true) {\n\t\tcase column.control.date:\n\t\t\tif (!value || !moment(value).isValid()) return value;\n\t\t\treturn moment(value).format('YYYY-MM-DD');\n\n\t\tcase column.control.datetime:\n\t\t\tif (!value || !moment(value).isValid()) return value;\n\t\t\treturn moment(value).format('YYYY-MM-DD HH:mm:ss');\n\n\t\tcase column.control.radio:\n\t\t\tif (value === true) return 't';\n\t\t\telse if (value === false) return 'f';\n\n\t\tdefault:\n\t\t\treturn value;\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/db/update.js":"\nvar async = require('async');\nvar qb = require('../qb')();\n\n\nexports.update = function (args, done) {\n\tvar types = /insert|update/.test(args.action)\n\t\t? ['view', 'oneToOne', 'manyToOne']\n\t\t// remove\n\t\t: ['oneToOne', 'manyToOne', 'view'];\n\n\tasync.eachSeries(types, function (type, done) {\n\t\targs.type = type;\n\t\targs.tables = args.data[type];\n\t\tif (!args.tables) return done();\n\n\t\tasync.eachSeries(Object.keys(args.tables), function (table, done) {\n\t\t\tvar records = args.tables[table].records;\n\t\t\tif (!records) return done();\n\n\t\t\tasync.eachSeries(records, function (record, done) {\n\t\t\t\tvar settings = args.settings[table];\n\t\t\t\ttbl.inline(args, settings, record);\n\n\t\t\t\tvar data = tbl.query(args, settings, record);\n\t\t\t\ttbl.execute(data.action, args, data.query, record, settings, done);\n\t\t\t}, done);\n\t\t}, done);\n\t}, done);\n}\n\n\nvar tbl = {\n\t// modifies inline record.columns[fk] with parent [pk]\n\tinline: function (args, settings, record) {\n\t\tif (args.type == 'view') return;\n\n\t\tvar fk = args.settings[args.name].editview[args.type][settings.table.name];\n\t\tfk = fk instanceof Array ? fk : [fk];\n\t\tfor (var i=0; i < fk.length; i++) {\n\t\t\trecord.columns[fk[i]] = args.id[i];\n\t\t}\n\t},\n\t// settings - current table settings, record - current record data\n\tquery: function (args, settings, record) {\n\t\tif (record.insert) {\n\t\t\tvar str = qb.tbl.insert(args, settings, record);\n\t\t\tvar action = 'insert';\n\n\t\t} else if (record.remove || args.action == 'remove') {\n\t\t\tvar str = qb.tbl.remove(args, settings, record);\n\t\t\tvar action = 'remove';\n\n\t\t} else { // update\n\t\t\tvar str = qb.tbl.update(args, settings, record);\n\t\t\tvar action = 'update';\n\t\t}\n\n\t\treturn {action:action, query:str};\n\t},\n\t_pks: function (args, settings, record, result) {\n\t\tvar pks = settings.table.pk instanceof Array ? settings.table.pk : [settings.table.pk],\n\t\t\tcolumns = record.columns,\n\t\t\tvalues = [];\n\n\t\tfor (var i=0; i < pks.length; i++) {\n\t\t\tif (columns[pks[i]] === undefined) {\n\t\t\t\tvalues.push(result.insertId);\n\t\t\t} else {\n\t\t\t\tvalues.push(columns[pks[i]]);\n\t\t\t}\n\t\t}\n\n\t\trecord.pk = values;\n\t\tif (args.type == 'view' && args.action == 'insert')\n\t\t\targs.id = values;\n\t},\n\texecute: function (action, args, str, record, settings, cb) {\n\t\tif (args.debug) return cb();\n\n\t\t// insert or update\n\t\tif (action != 'remove') {\n\t\t\targs.db.client.query(str, function (err, result) {\n\t\t\t\tif (err) return cb(err);\n\n\t\t\t\tif (action == 'insert') {\n\t\t\t\t\ttbl._pks(args, settings, record, result);\n\t\t\t\t}\n\n\t\t\t\tvar queries = many.queries(action, args, record, settings.columns);\n\t\t\t\tmany.execute(args, queries, function (err) {\n\t\t\t\t\tif (err) return cb(err);\n\t\t\t\t\tcb();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// remove\n\t\telse {\n\t\t\tvar queries = many.queries(action, args, record, settings.columns);\n\t\t\tmany.execute(args, queries, function (err) {\n\t\t\t\tif (err) return cb(err);\n\t\t\t\targs.db.client.query(str, function (err, result) {\n\t\t\t\t\tif (err) return cb(err);\n\t\t\t\t\tcb();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n};\n\n\nvar many = {\n\tqueries: function (action, args, record, columns) {\n\t\tvar queries = [];\n\n\t\tfor (var i=0; i < columns.length; i++) {\n\t\t\tif (!columns[i].manyToMany) continue;\n\n\t\t\tvar link = columns[i].manyToMany.link,\n\t\t\t\tdbIds = record.ids[columns[i].name] || [],\n\t\t\t\tpostIds = record.columns[columns[i].name] || [];\n\t\t\tpostIds = (postIds instanceof Array) ? postIds : [postIds];\n\n\t\t\tvar ins, del;\n\t\t\tswitch (action) {\n\t\t\t\tcase 'insert':\n\t\t\t\t\tins = many._insert(args, postIds, link, record);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'remove':\n\t\t\t\t\tdel = many._delete(args, dbIds, link, record);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'update':\n\t\t\t\t\tvar delIds = this._difference(dbIds, postIds),\n\t\t\t\t\t\tinsIds = this._difference(postIds, dbIds);\n\t\t\t\t\tdel = this._delete(args, delIds, link, record);\n\t\t\t\t\tins = this._insert(args, insIds, link, record);\n\t\t\t\t\tbreak;\t\t\n\t\t\t}\n\t\t\tins ? queries.push(ins) : null;\n\t\t\tdel ? queries.push(del) : null;\n\t\t}\n\t\treturn queries;\n\t},\n\t_insert: function (args, ids, link, record) {\n\t\tif (!ids.length) return null;\n\n\t\treturn qb.mtm.insert(args, ids, link, record);\n\t},\n\t_delete: function (args, ids, link, record) {\n\t\tif (!ids.length) return null;\n\n\t\treturn qb.mtm.remove(args, ids, link, record);\n\t},\n\t_difference: function (source, target) {\n\t\tfor (var i=0; i < source.length; i++) {\n\t\t\tsource[i] = source[i].toString();\n\t\t}\n\t\tfor (var i=0; i < target.length; i++) {\n\t\t\ttarget[i] = target[i].toString();\n\t\t}\n\t\treturn source.filter(function (i) {\n\t\t\treturn !(target.indexOf(i) > -1);\n\t\t});\n\t},\n\texecute: function (args, queries, done) {\n\t\tasync.eachSeries(queries, function (query, done) {\n\t\t\targs.db.client.query(query, done);\n\t\t}, done);\n\t}\n};\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/routes/index.js":"\nexports.auth     = require('./auth' );\nexports.login    = require('./login');\nexports.notfound = require('./404');\n\nexports.mainview = require('./mainview');\nexports.listview = require('./listview');\nexports.editview = require('./editview');\n\nexports.render   = require('./render');\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/routes/login.js":"\nexports.get = function (req, res, next) {\n\t\n\tres.locals.partials = {\n\t\tcontent: 'login'\n\t};\n\n\tnext();\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/routes/mainview.js":"\nexports.get = function (req, res, next) {\n\tvar settings = res.locals._admin.settings,\n\t\tcustom = res.locals._admin.custom;\n\n\tvar tables = [];\n\tfor (var key in settings) {\n\t\tvar item = settings[key];\n\t\tif (!item.mainview.show || !item.table.pk || item.table.view) continue;\n\t\ttables.push({slug: item.slug, name: item.table.verbose});\n\t}\n\n\tvar views = [];\n\tfor (var key in settings) {\n\t\tvar item = settings[key];\n\t\tif (!item.mainview.show || !item.table.view) continue;\n\t\tviews.push({slug: item.slug, name: item.table.verbose});\n\t}\n\n\tvar customs = [];\n\tfor (var key in custom) {\n\t\tvar item = custom[key].app;\n\t\tif (!item || !item.mainview || !item.mainview.show) continue;\n\t\tcustoms.push({slug: item.slug, name: item.verbose});\n\t}\n\n\tres.locals.tables = !tables.length ? null : {items: tables};\n\tres.locals.views = !views.length ? null : {items: views};\n\tres.locals.custom = !customs.length ? null : {items: customs};\n\t\n\tres.locals.partials = {\n\t\tcontent:  'mainview'\n\t};\n\n\tnext();\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/routes/listview.js":"\nvar async = require('async'),\n\tdcopy = require('deep-copy');\nvar qb = require('../lib/qb')(),\n\tdata = require('../lib/data'),\n\tformat = require('../lib/format');\nvar filter = require('../lib/listview/filter');\n\n\nfunction getArgs (req, res) {\n\tvar args = {\n\t\tsettings : res.locals._admin.settings,\n\t\tdb       : res.locals._admin.db,\n\t\tdebug    : res.locals._admin.debug,\n\t\tlog      : res.locals._admin.log,\n\t\tslug     : req.params[0],\n\t\tpage     : req.query.p || 0,\n\t\tdata     : req.body\n\t};\n\targs.name = res.locals._admin.slugs[args.slug];\n\targs.config = dcopy(args.settings[args.name]);\n\treturn args;\n}\n\nexports.get = function (req, res, next) {\n\t_data(req, res, next);\n}\n\nexports.post = function (req, res, next) {\n\t_data(req, res, next);\n}\n\nfunction _data (req, res, next) {\n\tvar args = getArgs(req, res),\n\t\tevents = res.locals._admin.events;\n\n\targs.filter = filter.prepareSession(req, args);\n\tqb.lst.select(args);\n\n\tvar results = {};\n\tasync.series([\n\t\tevents.preList.bind(events, req, res, args),\n\t\tfunction (done) {\n\t\t\tdata.list.get(args, function (err, result) {\n\t\t\t\tif (err) return done(err);\n\t\t\t\tresults.data = result;\n\t\t\t\tdone();\n\t\t\t});\n\t\t},\n\t\tfunction (done) {\n\t\t\tdata.pagination.get(args, function (err, pager) {\n\t\t\t\tif (err) return done(err);\n\t\t\t\t// always should be in front of filter.getColumns\n\t\t\t\t// as it may reduce args.config.columns\n\t\t\t\tresults.order = filter.getOrderColumns(req, args);\n\t\t\t\targs.config.columns = filter.getColumns(args);\n\t\t\t\tresults.pager = pager;\n\t\t\t\tdone();\n\t\t\t});\n\t\t},\n\t\tfunction (done) {\n\t\t\tdata.otm.get(args, function (err) {\n\t\t\t\tif (err) return done(err);\n\t\t\t\tdata.stc.get(args);\n\t\t\t\tdone();\n\t\t\t});\n\t\t}\n\t], function (err) {\n\t\tif (err) return next(err);\n\t\trender(\n\t\t\treq, res, args,\n\t\t\tresults.data, results.pager, results.order,\n\t\t\tnext\n\t\t);\n\t});\n}\n\nfunction render (req, res, args, ddata, pager, order, next) {\n\t// set filter active items\n\tfor (var i=0; i < args.config.columns.length; i++) {\n\t\tvar column = args.config.columns[i],\n\t\t\tvalue = args.filter.columns[column.name];\n\t\tcolumn.defaultValue = null;\n\t\tcolumn.value = format.form.value(column, value);\n\t}\n\n\tres.locals.view = {\n\t\tname: args.config.table.verbose,\n\t\tslug: args.slug,\n\t\terror: res.locals.error,\n\t\ttable: !args.config.table.view\n\t};\n\tres.locals.breadcrumbs = {\n\t\tlinks: [\n\t\t\t{url: '/', text: res.locals.string.home},\n\t\t\t{active: true, text: args.config.table.verbose}\n\t\t]\n\t};\n\n\t// show filter rows in two columns\n\tres.locals.filter = (function () {\n\t\tvar filter = args.config.columns,\n\t\t\trows = [];\n\t\tvar size = 2,\n\t\t\ttotal = filter.length / size;\n\t\tfor (var i=0; i < total; i++) {\n\t\t\trows.push({row: filter.slice(i*size, (i+1)*size)});\n\t\t}\n\t\treturn rows;\n\t}());\n\tres.locals.have = res.locals.filter.length ? true : false;\n\n\tres.locals.order = order;\n\t// order direction\n\tres.locals.direction = [\n\t\t{text: res.locals.string.asc, value: 'asc',\n\t\t\tselected: args.filter.direction == 'asc' ? true : null},\n\t\t{text: res.locals.string.desc, value: 'desc',\n\t\t\tselected: args.filter.direction == 'desc' ? true : null}\n\t];\n\tres.locals.collapsed = args.filter.show;\n\tres.locals.or = args.filter.or;\n\n\tres.locals.columns = ddata.columns;\n\tres.locals.records = ddata.records;\n\tres.locals.pagination = pager;\n\n\tres.locals.partials = {\n\t\tcontent:    'listview',\n\t\tfilter:     'listview/filter',\n\t\tcolumn:     'listview/column',\n\t\tpagination: 'pagination'\n\t};\n\t\n\tnext();\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/lib/listview/filter.js":"\nvar dcopy = require('deep-copy');\n\n\nexports.prepareSession = function (req, args) {\n\tif (!req.session.filter) req.session.filter = {};\n\tvar filter = req.session.filter;\n\n\tif ((req.method == 'GET' && !filter.hasOwnProperty(args.name))\n\t|| (req.method == 'POST' && req.body.action.hasOwnProperty('clear'))) {\n\t\tfilter[args.name] = {\n\t\t\tcolumns: {},\n\t\t\torder: '',\n\t\t\tdirection: '',\n\t\t\tshow: false,\n\t\t\tor: false\n\t\t};\n\t}\n\telse if (req.method == 'POST' && req.body.action.hasOwnProperty('filter')) {\n\t\tfilter[args.name] = {\n\t\t\tcolumns: req.body.filter||{},\n\t\t\torder: req.body.order,\n\t\t\tdirection: req.body.direction,\n\t\t\tshow: true,\n\t\t\tor: req.body.or\n\t\t};\n\t}\n\n\tfilter[args.name].page = args.page;\n\n\treturn filter[args.name];\n}\n\nexports.getOrderColumns = function (req, args) {\n\tvar order = [];\n\tfor (var i=0; i < args.config.columns.length; i++) {\n\t\tvar column = args.config.columns[i];\n\t\tif (!column.listview.show) continue;\n\t\tif (column.name == args.filter.order) {\n\t\t\tcolumn = dcopy(column);\n\t\t\tcolumn.selected = true;\n\t\t}\n\t\torder.push(column);\n\t}\n\treturn order;\n}\n\nexports.getColumns = function (args) {\n\tvar filter = [];\n\tfor (var i=0; i < args.config.columns.length; i++) {\n\t\tif (!args.config.listview.filter) continue;\n\t\tfor (var j=0; j < args.config.listview.filter.length; j++) {\n\t\t\tif (args.config.columns[i].name == args.config.listview.filter[j]) {\n\t\t\t\tvar column = dcopy(args.config.columns[i]);\n\t\t\t\tcolumn.key = 'filter['+column.name+']';\n\t\t\t\tfilter.push(column);\n\t\t\t}\n\t\t}\n\t}\n\treturn filter;\n}\n","/home/travis/build/npmtest/node-npmtest-express-admin/node_modules/express-admin/routes/render.js":"\nexports.admin = function (req, res) {\n\t\n\tres.locals.partials.header = 'header';\n\tres.locals.partials.breadcrumbs = 'breadcrumbs';\n\tres.locals.partials.theme = 'js/theme';\n\tres.locals.partials.layout = 'js/layout';\n\n\tres.render('base', {\n\t\t\n\t\tuser: req.session.user,\n\t\tcsrf: req.csrfToken(),\n\n\t\turl: {\n\t\t\thome: '/'\n\t\t}\n\t});\n}\n"}